class t{constructor(t,e){this.x=t,this.y=e}add(e){return new t(this.x+e.x,this.y+e.y)}subtract(e){return new t(this.x-e.x,this.y-e.y)}multiply(e){return new t(this.x*e,this.y*e)}divide(e){return new t(this.x/e,this.y/e)}magnitude(){return Math.sqrt(this.x*this.x+this.y*this.y)}normalize(){const e=this.magnitude();return new t(this.x/e,this.y/e)}dotProduct(t){return this.x*t.x+this.y*t.y}angleBetween(t){const e=this.dotProduct(t),i=this.magnitude()*t.magnitude();if(Math.abs(e-i)<Number.EPSILON)return e>=0?0:Math.PI;if(0===i)return 0;const s=e/i;let r=Math.acos(s);return this.x*t.y-this.y*t.x<0&&(r=2*Math.PI-r),r}toString(){return`(${this.x}, ${this.y})`}static fromPoints(e,i){return new t(i.x-e.x,i.y-e.y)}}function e(t){return t*(180/Math.PI)}function i(t,e,i){return(1-i)*t+i*e}function s(t,e){return void 0===e&&(e=t,t=0),Math.random()*(e-t)+t}class r{constructor(e,i,s,r){2==arguments.length&&"object"==typeof e&&"object"==typeof i?(this.pt1=e,this.pt2=i):(this.pt1=new t(e,i),this.pt2=new t(s,r)),this.fontSize=10,this.strokeColor="black",this.isDashedLine=!1,this.drawTextLabels=!0,this.drawTextMagnitude=!0,this.drawTextAngle=!0,this.strokeWeight=2}get x1(){return this.pt1.x}set x1(t){this.pt1.x=t}get y1(){return this.pt1.y}set y1(t){this.pt1.y=t}get x2(){return this.pt2.x}set x2(t){this.pt2.x=t}get y2(){return this.pt2.y}set y2(t){this.pt2.y=t}getHeading(){const t=this.pt2.subtract(this.pt1);let e=Math.atan2(t.y,t.x);return e<0&&(e+=2*Math.PI),e}getNormals(){return function(e,i){const s=i.subtract(e);return[new t(s.y,-s.x),new t(-s.y,s.x)]}(this.pt1,this.pt2)}getNormal(){return this.getNormals()[0]}getVectorAtOrigin(){return this.pt2.subtract(this.pt1)}getAnglesBetween(t){const i=this.getVectorAtOrigin();let s;s=t instanceof r?t.getVectorAtOrigin():t;let l=i.angleBetween(s);console.log(`angleBetweenDegrees: ${e(l).toFixed(1)}`),l<0&&(l+=2*Math.PI);const o=l;return{counterclockwiseAngle:2*Math.PI-l,clockwiseAngle:o}}getOrthogonalProjection(t){const e=this.pt2.subtract(this.pt1),i=t.subtract(this.pt1),s=e.magnitude(),r=Math.min(Math.max(i.dotProduct(e.normalize()),0),s);return this.pt1.add(e.multiply(r))}getDistance(t){const e=this.getOrthogonalProjection(t);return t.subtract(e).magnitude()}getMagnitude(){return this.pt2.subtract(this.pt1).magnitude()}setMagnitude(t){const e=this.pt2.subtract(this.pt1).normalize().multiply(t);this.pt2=this.pt1.add(e)}draw(t){if(t.strokeStyle=this.strokeColor,t.lineWidth=this.strokeWeight,this.isDashedLine&&t.setLineDash([5,15]),this.drawArrow(t,this.pt1,this.pt2.subtract(this.pt1),this.strokeColor),this.drawTextLabels){t.font=`${this.fontSize}px Arial`,t.textAlign="left",t.textBaseline="top",t.fillStyle=this.strokeColor;const e=this.generateLabel(),i=t.measureText(e).width;t.fillText(e,-i-3,12)}}drawArrow(t,e,i,s){const r=10,l=Math.atan2(i.y,i.x);t.save(),t.strokeStyle=s,t.fillStyle=s,t.beginPath(),t.moveTo(e.x,e.y),t.lineTo(e.x+i.x,e.y+i.y),t.stroke(),t.beginPath(),t.moveTo(e.x+i.x,e.y+i.y),t.lineTo(e.x+i.x-r*Math.cos(l-Math.PI/6),e.y+i.y-r*Math.sin(l-Math.PI/6)),t.lineTo(e.x+i.x-r*Math.cos(l+Math.PI/6),e.y+i.y-r*Math.sin(l+Math.PI/6)),t.lineTo(e.x+i.x,e.y+i.y),t.lineTo(e.x+i.x-r*Math.cos(l-Math.PI/6),e.y+i.y-r*Math.sin(l-Math.PI/6)),t.stroke(),t.fill(),t.restore()}generateLabel(){let t="";if(this.drawTextAngle){t+=`${Math.round(180*Math.atan2(this.pt2.y-this.pt1.y,this.pt2.x-this.pt1.x)/Math.PI)}°`}return this.drawTextAngle&&this.drawTextMagnitude&&(t+=" "),this.drawTextMagnitude&&(t+=`|${this.getMagnitude().toFixed(1)}|`),t}static drawAngleArcs(i,s,r,l="blue",o="red",h=50,a=30){const n=s.getHeading(),g=s.getAnglesBetween(r);console.log(`CW angle ${e(g.clockwiseAngle).toFixed(1)} CCW angle ${e(g.counterclockwiseAngle).toFixed(1)}`),i.save(),i.beginPath(),i.arc(s.pt1.x,s.pt1.y,h,n,n+g.clockwiseAngle,!1),i.strokeStyle=l,i.stroke();const c=new t(s.pt1.x+1.35*h*Math.cos(n+g.clockwiseAngle/2),s.pt1.y+1.35*h*Math.sin(n+g.clockwiseAngle/2));i.font="12px Arial",i.textAlign="center",i.textBaseline="middle",i.fillStyle=l;const u=`${e(g.clockwiseAngle).toFixed(1)}°`;i.fillText(u,c.x,c.y),i.beginPath(),i.arc(s.pt1.x,s.pt1.y,a,n,n-g.counterclockwiseAngle,!0),i.strokeStyle=o,i.stroke();const y=new t(s.pt1.x+1.5*a*Math.cos(n-g.counterclockwiseAngle/2),s.pt1.y+1.5*a*Math.sin(n-g.counterclockwiseAngle/2)),p=`${e(g.counterclockwiseAngle).toFixed(1)}°`;i.fillStyle=o,i.fillText(p,y.x,y.y),i.restore()}}class l{constructor(t,e,i){this.makeLabLogoArray=l.createMakeabilityLabLogoCellArray(t,e,i),this.visible=!0,this.isMOutlineVisible=!0,this.isLOutlineVisible=!0,this.mOutlineColor="black",this.mOutlineStrokeWidth=4,this.lOutlineColor="black",this.lOutlineStrokeWidth=4,this.setColors("white","black"),this.setFillColorsToDefault();for(const t of this.getMShadowTriangles())t.fillColor=t.strokeColor;this.areLTriangleStrokesVisible=!1}static get numRows(){return 4}static get numCols(){return 6}static getWidth(t){return l.numCols*t}static getHeight(t){return l.numRows*t}static getXCenterPosition(t,e){const i=(e-l.getWidth(t))/2;return Math.round(i/t)*t}static getYCenterPosition(t,e){const i=(e-l.getHeight(t))/2;return Math.round(i/t)*t}get x(){return this.makeLabLogoArray[0][0].x}get y(){return this.makeLabLogoArray[0][0].y}get cellSize(){return this.makeLabLogoArray[0][0].size}get width(){return l.numCols*this.makeLabLogoArray[0][0].size}get height(){return l.numRows*this.makeLabLogoArray[0][0].size}get areDefaultColorsOn(){return this._defaultColorsOn}set areLTriangleStrokesVisible(t){for(const e of this.getLTriangles())e.isStrokeVisible=t}get areLTriangleStrokesVisible(){let t=!0;for(const e of this.getLTriangles())t&=e.isStrokeVisible;return t}setStrokeTransparent(t,e=!0){for(const i of this.getAllTriangles(e))i.isStrokeVisible=!t}setFillTransparent(t,e=!0){for(const i of this.getAllTriangles(e))i.isFillVisible=!t}setColors(t,e){for(let i=0;i<this.makeLabLogoArray.length;i++)for(let s=0;s<this.makeLabLogoArray[i].length;s++)this.makeLabLogoArray[i][s].tri1.fillColor=t,this.makeLabLogoArray[i][s].tri1.strokeColor=e,this.makeLabLogoArray[i][s].tri2.fillColor=t,this.makeLabLogoArray[i][s].tri2.strokeColor=e;for(const t of this.getMShadowTriangles())t.fillColor=t.strokeColor}getAllTriangles(t=!0){let e=new Array;for(let i=0;i<this.makeLabLogoArray.length;i++)for(let s=0;s<this.makeLabLogoArray[i].length;s++)!t&&l.isMShadowTriangle(i,s,1)||e.push(this.makeLabLogoArray[i][s].tri1),!t&&l.isMShadowTriangle(i,s,2)||e.push(this.makeLabLogoArray[i][s].tri2);return e}getMShadowTriangles(){let t=new Array;return t.push(this.makeLabLogoArray[2][1].tri2),t.push(this.makeLabLogoArray[3][1].tri1),t.push(this.makeLabLogoArray[2][4].tri2),t.push(this.makeLabLogoArray[3][4].tri1),t}getLTriangles(){let t=new Array;return t.push(this.makeLabLogoArray[0][0].tri2),t.push(this.makeLabLogoArray[0][1].tri2),t.push(this.makeLabLogoArray[1][0].tri1),t.push(this.makeLabLogoArray[1][1].tri1),t.push(this.makeLabLogoArray[1][1].tri2),t.push(this.makeLabLogoArray[1][2].tri2),t.push(this.makeLabLogoArray[2][1].tri1),t.push(this.makeLabLogoArray[2][2].tri1),t.push(this.makeLabLogoArray[2][2].tri2),t.push(this.makeLabLogoArray[3][2].tri1),t.push(this.makeLabLogoArray[3][3].tri1),t.push(this.makeLabLogoArray[2][3].tri1),t.push(this.makeLabLogoArray[2][3].tri2),t.push(this.makeLabLogoArray[1][3].tri2),t.push(this.makeLabLogoArray[2][4].tri1),t.push(this.makeLabLogoArray[1][4].tri2),t}getDefaultColoredTriangles(){let t=new Array;return t.push(this.makeLabLogoArray[0][4].tri2),t.push(this.makeLabLogoArray[0][5].tri2),t.push(this.makeLabLogoArray[1][0].tri2),t.push(this.makeLabLogoArray[1][4].tri1),t.push(this.makeLabLogoArray[1][5].tri1),t.push(this.makeLabLogoArray[1][5].tri2),t.push(this.makeLabLogoArray[2][0].tri1),t.push(this.makeLabLogoArray[2][0].tri2),t.push(this.makeLabLogoArray[2][5].tri1),t.push(this.makeLabLogoArray[2][5].tri2),t.push(this.makeLabLogoArray[3][0].tri1),t.push(this.makeLabLogoArray[3][5].tri1),t}setFillColorsToDefault(){this.setDefaultColoredTrianglesFillColor(c)}setDefaultColoredTrianglesFillColor(t){const e=this.getDefaultColoredTriangles();if(Array.isArray(t))for(let i=0;i<e.length;i++)e[i].fillColor=t[i];else for(let i=0;i<e.length;i++)e[i].fillColor=t}draw(t){if(this.visible){for(let e=0;e<this.makeLabLogoArray.length;e++)for(let i=0;i<this.makeLabLogoArray[e].length;i++)this.makeLabLogoArray[e][i].draw(t);if(this.isMOutlineVisible){t.save(),t.strokeStyle=this.mOutlineColor,t.lineWidth=this.mOutlineStrokeWidth,t.beginPath();let e=this.getMOutlinePoints();for(const[i,s]of e)t.lineTo(i,s);t.closePath(),t.stroke(),t.restore()}if(this.isLOutlineVisible){t.save(),t.strokeStyle=this.lOutlineColor,t.lineWidth=this.lOutlineStrokeWidth,t.beginPath();let e=this.getLOutlinePoints();for(const[i,s]of e)t.lineTo(i,s);t.closePath(),t.stroke(),t.restore()}}}getLOutlineLineSegments(){let t=new Array;return t.push(new r(this.x+this.cellSize,this.y,this.x+3*this.cellSize,this.y+2*this.cellSize)),t.push(new r(this.x+3*this.cellSize,this.y+2*this.cellSize,this.x+4*this.cellSize,this.y+this.cellSize)),t.push(new r(this.x+4*this.cellSize,this.y+this.cellSize,this.x+5*this.cellSize,this.y+2*this.cellSize)),t.push(new r(this.x+5*this.cellSize,this.y+2*this.cellSize,this.x+3*this.cellSize,this.y+4*this.cellSize)),t.push(new r(this.x+3*this.cellSize,this.y+4*this.cellSize,this.x,this.y+1*this.cellSize)),t.push(new r(this.x,this.y+this.cellSize,this.x+this.cellSize,this.y)),t}getLOutlinePoints(){let t=new Array;return t.push([this.x,this.y+this.cellSize]),t.push([this.x+this.cellSize,this.y]),t.push([this.x+2*this.cellSize,this.y+this.cellSize]),t.push([this.x+3*this.cellSize,this.y+2*this.cellSize]),t.push([this.x+4*this.cellSize,this.y+this.cellSize]),t.push([this.x+5*this.cellSize,this.y+2*this.cellSize]),t.push([this.x+4*this.cellSize,this.y+3*this.cellSize]),t.push([this.x+3*this.cellSize,this.y+4*this.cellSize]),t.push([this.x+2*this.cellSize,this.y+3*this.cellSize]),t.push([this.x+1*this.cellSize,this.y+2*this.cellSize]),t.push([this.x+0*this.cellSize,this.y+1*this.cellSize]),t}getMOutlineLineSegments(){let t=new Array;return t.push(new r(this.x+this.cellSize,this.y,this.x+3*this.cellSize,this.y+2*this.cellSize)),t.push(new r(this.x+3*this.cellSize,this.y+2*this.cellSize,this.x+5*this.cellSize,this.y)),t.push(new r(this.x+5*this.cellSize,this.y,this.x+6*this.cellSize,this.y+this.cellSize)),t.push(new r(this.x+6*this.cellSize,this.y+this.cellSize,this.x+6*this.cellSize,this.y+3*this.cellSize)),t.push(new r(this.x+6*this.cellSize,this.y+3*this.cellSize,this.x+5*this.cellSize,this.y+4*this.cellSize)),t.push(new r(this.x+5*this.cellSize,this.y+4*this.cellSize,this.x+4*this.cellSize,this.y+3*this.cellSize)),t.push(new r(this.x+4*this.cellSize,this.y+3*this.cellSize,this.x+3*this.cellSize,this.y+4*this.cellSize)),t.push(new r(this.x+3*this.cellSize,this.y+4*this.cellSize,this.x+2*this.cellSize,this.y+3*this.cellSize)),t.push(new r(this.x+2*this.cellSize,this.y+3*this.cellSize,this.x+this.cellSize,this.y+4*this.cellSize)),t.push(new r(this.x+this.cellSize,this.y+4*this.cellSize,this.x,this.y+3*this.cellSize)),t.push(new r(this.x,this.y+3*this.cellSize,this.x,this.y+this.cellSize)),t.push(new r(this.x,this.y+this.cellSize,this.x+this.cellSize,this.y)),t}getMOutlinePoints(){let t=new Array;return t.push([this.x,this.y+this.cellSize]),t.push([this.x+this.cellSize,this.y]),t.push([this.x+2*this.cellSize,this.y+this.cellSize]),t.push([this.x+3*this.cellSize,this.y+2*this.cellSize]),t.push([this.x+4*this.cellSize,this.y+this.cellSize]),t.push([this.x+5*this.cellSize,this.y]),t.push([this.x+6*this.cellSize,this.y+this.cellSize]),t.push([this.x+6*this.cellSize,this.y+2*this.cellSize]),t.push([this.x+6*this.cellSize,this.y+3*this.cellSize]),t.push([this.x+5*this.cellSize,this.y+4*this.cellSize]),t.push([this.x+4*this.cellSize,this.y+3*this.cellSize]),t.push([this.x+3*this.cellSize,this.y+4*this.cellSize]),t.push([this.x+2*this.cellSize,this.y+3*this.cellSize]),t.push([this.x+1*this.cellSize,this.y+4*this.cellSize]),t.push([this.x+0*this.cellSize,this.y+3*this.cellSize]),t.push([this.x+0*this.cellSize,this.y+2*this.cellSize]),t.push([this.x+0*this.cellSize,this.y+1*this.cellSize]),t}static setRandomColors(t,e=!0,i=!0){for(const s of t){const t=u.getRandomOriginalColor();s.fillColor=t,s.startFillColor=t,s.endFillColor=t,s.strokeColor=t,s.isFillVisible=e,s.isStrokeVisible=i}}static setColors(t,e,i,s=!0,r=!0){for(const l of t)l.fillColor=e,l.startFillColor=e,l.endFillColor=e,l.strokeColor=i,l.isFillVisible=s,l.isStrokeVisible=r}static createMakeabilityLabLogoCellArray(t,e,i){let s=new Array(l.numRows);for(let t=0;t<s.length;t++)s[t]=new Array(l.numCols);return s[0]=l.createMakeabilityLabTopRow(t,e,i),e+=i,s[1]=l.createMakeabilityLab2ndRow(t,e,i),e+=i,s[2]=l.createMakeabilityLab3rdRow(t,e,i),e+=i,s[3]=l.createMakeabilityLabBottomRow(t,e,i),s}static createMakeabilityLabTopRow(t,e,i){let s=new Array(l.numCols),r=0;return s[r++]=h.createCellWithBottomTriangleOnly(t,e,i,o.BottomRight),t+=i,s[r++]=h.createCellWithBottomTriangleOnly(t,e,i,o.BottomLeft),t+=i,s[r++]=h.createEmptyCell(t,e,i,o.TopLeft),t+=i,s[r++]=h.createEmptyCell(t,e,i,o.TopRight),t+=i,s[r++]=h.createCellWithBottomTriangleOnly(t,e,i,o.BottomRight),t+=i,s[r++]=h.createCellWithBottomTriangleOnly(t,e,i,o.BottomLeft),s}static createMakeabilityLab2ndRow(t,e,i){let s=new Array(l.numCols),r=0;return s[r++]=h.createCell(t,e,i,o.TopRight,o.BottomLeft),t+=i,s[r++]=h.createCell(t,e,i,o.TopLeft,o.BottomRight),t+=i,s[r++]=h.createCellWithBottomTriangleOnly(t,e,i,o.BottomLeft),t+=i,s[r++]=h.createCellWithBottomTriangleOnly(t,e,i,o.BottomRight),t+=i,s[r++]=h.createCell(t,e,i,o.TopRight,o.BottomLeft),t+=i,s[r++]=h.createCell(t,e,i,o.TopLeft,o.BottomRight),s}static createMakeabilityLab3rdRow(t,e,i){let s=new Array(l.numCols);for(let r=0;r<s.length;r++){let l=o.TopLeft;r%2!=0&&(l=o.TopRight),s[r]=h.createCell(t,e,i,l),t+=i}return s}static createMakeabilityLabBottomRow(t,e,i){let s=new Array(l.numCols);for(let r=0;r<s.length;r++){let l=o.TopRight;r%2!=0&&(l=o.TopLeft),s[r]=h.createCellWithTopTriangleOnly(t,e,i,l),t+=i}return s}static isMShadowTriangle(t,e,i){return 2==t&&1==e&&2==i||3==t&&1==e&&1==i||2==t&&4==e&&2==i||3==t&&4==e&&1==i}}const o={TopLeft:"TopLeft",TopRight:"TopRight",BottomLeft:"BottomLeft",BottomRight:"BottomRight"};class h{constructor(t,e){this.tri1=t,this.tri2=e}get x(){return this.tri1.x}get y(){return this.tri1.y}get size(){return this.tri1.size}setColors(t,e){this.setFillColor(t),e?this.setStrokeColor(e):this.setStrokeColor(t)}setFillColor(t){this.tri1.fillColor=t,this.tri2.fillColor=t}setStrokeColor(t){this.tri1.strokeColor=t,this.tri2.strokeColor=t}setVisibility(t){this.tri1.visible=t,this.tri2.visible=t}draw(t){this.tri1.visible&&this.tri1.draw(t),this.tri2.visible&&this.tri2.draw(t)}static createEmptyCell(t,e,i,s=o.TopLeft){let r=new a(t,e,i,s),l=new a(t,e,i,a.getOppositeDirection(s));return r.visible=!1,l.visible=!1,new h(r,l)}static createCellWithTopTriangleOnly(t,e,i,s){let r=new a(t,e,i,s),l=new a(t,e,i,a.getOppositeDirection(s));return l.visible=!1,new h(r,l)}static createCellWithBottomTriangleOnly(t,e,i,s){let r=new a(t,e,i,a.getOppositeDirection(s)),l=new a(t,e,i,s);return r.visible=!1,new h(r,l)}static createCell(t,e,i,s,r){let l=new a(t,e,i,s);r||(r=a.getOppositeDirection(s));let o=new a(t,e,i,r);return new h(l,o)}}class a{constructor(t,e,i,s,r="white",l="black",o=1,h=!0){this.x=t,this.y=e,this.size=i,this.direction=s,this.angle=0,this.strokeColor=l,this.fillColor=r,this.strokeWeight=o,this.visible=h,this.isFillVisible=!0,this.isStrokeVisible=!0,this.drawCellOutline=!1}setColors(t,e){this.fillColor=t,this.strokeColor=e||t}draw(t){if(this.visible){switch(t.save(),this.isFillVisible?t.fillStyle=this.fillColor:t.fillStyle="rgba(0, 0, 0, 0)",this.isStrokeVisible?(t.strokeStyle=this.strokeColor,t.lineWidth=this.strokeWeight):t.strokeStyle="rgba(0, 0, 0, 0)",t.translate(this.x,this.y),t.rotate(this.angle*Math.PI/180),t.beginPath(),this.direction){case o.BottomLeft:t.moveTo(0,0),t.lineTo(0,this.size),t.lineTo(this.size,this.size);break;case o.BottomRight:t.moveTo(0,this.size),t.lineTo(this.size,this.size),t.lineTo(this.size,0);break;case o.TopRight:t.moveTo(0,0),t.lineTo(this.size,0),t.lineTo(this.size,this.size);break;case o.TopLeft:default:t.moveTo(0,this.size),t.lineTo(0,0),t.lineTo(this.size,0)}t.closePath(),this.isFillVisible&&t.fill(),this.isStrokeVisible&&t.stroke(),this.drawCellOutline&&(t.strokeStyle="rgba(128, 128, 128, 0.5)",t.strokeRect(0,0,this.size,this.size)),t.restore()}}static getOppositeDirection(t){switch(t){case o.BottomLeft:return o.TopRight;case o.BottomRight:return o.TopLeft;case o.TopRight:return o.BottomLeft;case o.TopLeft:default:return o.BottomRight}}static createTriangle(t){return new a(t.x,t.y,t.size,t.direction,t.fillColor,t.strokeColor,t.strokeWeight,t.visible)}}class n{constructor(t,e,i,s="rgba(200, 200, 200, 0.5)",r=null){this.gridArray=n.createGrid(t,e,i,s,r),this.visible=!0,this.setFillColor(r)}draw(t){if(this.visible)for(let e=0;e<this.gridArray.length;e++)for(let i=0;i<this.gridArray[e].length;i++)this.gridArray[e][i].draw(t)}setStrokeColor(t){for(let e=0;e<this.gridArray.length;e++)for(let i=0;i<this.gridArray[e].length;i++)this.gridArray[e][i].tri1.strokeColor=t,this.gridArray[e][i].tri2.strokeColor=t}setFillColor(t){for(let e=0;e<this.gridArray.length;e++)for(let i=0;i<this.gridArray[e].length;i++)this.gridArray[e][i].tri1.fillColor=t,this.gridArray[e][i].tri2.fillColor=t}static createGrid(t,e,i,s,r){const l=Math.floor(t/i),a=Math.floor(e/i);let n=new Array(a);for(let t=0;t<n.length;t++){n[t]=new Array(l);for(let e=0;e<n[t].length;e++){let l=o.TopLeft;(t%2==0&&e%2==0||t%2!=0&&e%2!=0)&&(l=o.TopRight);let a=h.createCell(e*i,t*i,i,l);a.tri1.strokeColor=s,a.tri2.strokeColor=s,r&&(a.tri1.fillColor=r,a.tri2.fillColor=r),n[t][e]=a}}return n}}const g={Blue:"rgb(135, 202, 228)",BlueGray:"rgb(147, 169, 207)",Purple:"rgb(171, 147, 197)",Green:"rgb(148, 206, 146)",Orange:"rgb(235, 185, 130)",RedPurple:"rgb(207, 145, 166)",Pink:"rgb(237, 162, 163)",YellowGreen:"rgb(239, 226, 127)",LightGreen:"rgb(209, 226, 133)",BlueGreen:"rgb(147, 211, 202)"},c=[g.Blue,g.BlueGray,g.YellowGreen,g.Purple,g.Green,g.Orange,g.YellowGreen,g.LightGreen,g.Orange,g.RedPurple,g.BlueGreen,g.Pink];class u{static getRandomOriginalColor(){return u.getRandomColorFromPalette(g)}static getRandomColorFromPalette(t){t||(t=g);const e=Object.keys(t);return t[e[Math.floor(Math.random()*e.length)]]}}function y(t,e,s){t=p(t),e=p(e);return`rgba(${Math.round(i(t.r,e.r,s))}, ${Math.round(i(t.g,e.g,s))}, ${Math.round(i(t.b,e.b,s))}, ${i(t.a||1,e.a||1,s)})`}function p(t){if("string"==typeof t){const e=t.match(/^#([0-9a-fA-F]{6}|[0-9a-fA-F]{3}|[0-9a-fA-F]{8})$/);if(e){const t=e[1];return 8===t.length?{r:parseInt(t.substring(0,2),16),g:parseInt(t.substring(2,4),16),b:parseInt(t.substring(4,6),16),a:parseInt(t.substring(6,8),16)/255}:{r:parseInt(t.substring(0,2),16),g:parseInt(t.substring(2,4),16),b:parseInt(t.substring(4,6),16),a:1}}if(t.startsWith("rgb")){const e=t.match(/rgba?\((\d+), (\d+), (\d+)(?:, (\d?\.\d+))?\)/);if(e){const[,t,i,s,r]=e;return{r:parseInt(t),g:parseInt(i),b:parseInt(s),a:void 0!==r?parseFloat(r):1}}}throw new Error(`Invalid color string: ${t}`)}return t}class L{constructor(t,e,i){this.makeLabLogo=new l(t,e,i),this.makeLabLogo.visible=!1,this.makeLabLogoAnimated=new l(t,e,i),this.makeLabLogoAnimated.isLOutlineVisible=!1,this.makeLabLogoAnimated.isMOutlineVisible=!1,this.originalRandomTriLocs=[],this.reset(),this.explodeSize=!0,this.explodeX=!0,this.explodeY=!0,this.explodeAngle=!0}reset(t,e){this.originalRandomTriLocs=[];const i=this.makeLabLogoAnimated.triangleSize;for(const r of this.makeLabLogo.getAllTriangles(!0)){let l=this.explodeSize?s(i/2,3*i):i;r.x=s(l,t-l),r.y=s(l,e-l),r.angle=modifyAngle?s(0,360):0,r.size=l,this.originalRandomTriLocs.push({x:r.x,y:r.y,angle:r.angle,size:l})}}update(t){this.makeLabLogoAnimated.isLOutlineVisible=t>=1;const e=this.makeLabLogo.getAllTriangles(!0);let s=this.makeLabLogoAnimated.getAllTriangles(!0);for(let r=0;r<this.originalRandomTriLocs.length;r++){const l=e[r].x,o=e[r].y,h=0,a=e[r].size,n=this.originalRandomTriLocs[r].x,g=this.originalRandomTriLocs[r].y,c=this.originalRandomTriLocs[r].angle,u=this.originalRandomTriLocs[r].size,y=i(n,l,t),p=i(g,o,t),L=i(c,h,t),b=i(u,a,t);s[r].x=y,s[r].y=p,s[r].angle=L,s[r].size=b}const r=this.makeLabLogoAnimated.getDefaultColoredTriangles();for(let e=0;e<r.length;e++){const i=y({r:255,g:255,b:255,a:1},c[e],t);r[e].fillColor=i}}draw(t){this.makeLabLogo.draw(t),this.makeLabLogoAnimated.draw(t)}}export{h as Cell,n as Grid,l as MakeabilityLabLogo,u as MakeabilityLabLogoColorer,L as MakeabilityLabLogoExploder,c as ORIGINAL_COLOR_ARRAY,g as OriginalColorPaletteRGB,a as Triangle,o as TriangleDir};
