{"version":3,"file":"makelab.math.js","sources":["../src/lib/math/math-utils.js","../src/lib/math/vector.js"],"sourcesContent":["/**\r\n * Converts degrees to radians.\r\n *\r\n * @param {number} degrees - The angle in degrees to be converted to radians.\r\n * @returns {number} The angle in radians.\r\n */\r\nexport function convertToRadians(degrees) {\r\n  return degrees * (Math.PI / 180);\r\n}\r\n\r\n/**\r\n * Converts an angle from radians to degrees.\r\n *\r\n * @param {number} radians - The angle in radians to be converted.\r\n * @returns {number} The angle in degrees.\r\n */\r\nexport function convertToDegrees(radians) {\r\n  return radians * (180 / Math.PI);\r\n}\r\n\r\n/**\r\n * Linearly interpolates between two values.\r\n *\r\n * @param {number} start - The starting value.\r\n * @param {number} end - The ending value.\r\n * @param {number} amt - The interpolation amount (0-1).\r\n * @returns {number} The interpolated value.\r\n */\r\nexport function lerp(start, end, amt) {\r\n  return (1 - amt) * start + amt * end;\r\n}\r\n\r\n/**\r\n * Generates a random number within a specified range (similar to p5js random)\r\n * If only one argument is provided, it generates a number between 0 and the argument.\r\n * If two arguments are provided, it generates a number between the two arguments.\r\n * \r\n * @param {number} min - The minimum value (inclusive) or the maximum value if only one argument is provided.\r\n * @param {number} [max] - The maximum value (exclusive).\r\n * @returns {number} A random number within the specified range.\r\n */\r\nexport function random(min, max) {\r\n  if (max === undefined) {\r\n    max = min;\r\n    min = 0;\r\n  }\r\n  return Math.random() * (max - min) + min;\r\n}","/**\r\n * Class representing a 2D vector.\r\n */\r\nexport class Vector {\r\n  /**\r\n   * Create a vector.\r\n   * @param {number} x - The x coordinate.\r\n   * @param {number} y - The y coordinate.\r\n   */\r\n  constructor(x, y) {\r\n    this.x = x;\r\n    this.y = y;\r\n  }\r\n\r\n  /**\r\n   * Add another vector to this vector.\r\n   * @param {Vector} other - The vector to add.\r\n   * @returns {Vector} The resulting vector.\r\n   */\r\n  add(other) {\r\n    return new Vector(this.x + other.x, this.y + other.y);\r\n  }\r\n\r\n  /**\r\n   * Subtract another vector from this vector.\r\n   * @param {Vector} other - The vector to subtract.\r\n   * @returns {Vector} The resulting vector.\r\n   */\r\n  subtract(other) {\r\n    return new Vector(this.x - other.x, this.y - other.y);\r\n  }\r\n\r\n  /**\r\n   * Multiply this vector by a scalar.\r\n   * @param {number} scalar - The scalar to multiply by.\r\n   * @returns {Vector} The resulting vector.\r\n   */\r\n  multiply(scalar) {\r\n    return new Vector(this.x * scalar, this.y * scalar);\r\n  }\r\n\r\n  /**\r\n   * Divide this vector by a scalar.\r\n   * @param {number} scalar - The scalar to divide by.\r\n   * @returns {Vector} The resulting vector.\r\n   */\r\n  divide(scalar) {\r\n    return new Vector(this.x / scalar, this.y / scalar);\r\n  }\r\n\r\n  /**\r\n   * Calculate the magnitude (length) of this vector.\r\n   * @returns {number} The magnitude of the vector.\r\n   */\r\n  magnitude() {\r\n    return Math.sqrt(this.x * this.x + this.y * this.y);\r\n  }\r\n\r\n  /**\r\n   * Normalize this vector (make it have a magnitude of 1).\r\n   * @returns {Vector} The normalized vector.\r\n   */\r\n  normalize() {\r\n    const mag = this.magnitude();\r\n    return new Vector(this.x / mag, this.y / mag);\r\n  }\r\n\r\n  /**\r\n   * Calculate the dot product of this vector and another vector.\r\n   * @param {Vector} other - The other vector.\r\n   * @returns {number} The dot product.\r\n   */\r\n  dotProduct(other) {\r\n    return this.x * other.x + this.y * other.y;\r\n  }\r\n\r\n  /**\r\n   * Calculate the angle between this vector and another vector.\r\n   * @param {Vector} other - The other vector.\r\n   * @returns {number} The angle in radians.\r\n   */\r\n  angleBetween(other) {\r\n    // const cosTheta = this.dotProduct(other) / (this.magnitude() * other.magnitude());\r\n    // return Math.acos(cosTheta);\r\n\r\n    const dotProduct = this.dotProduct(other);\r\n    const magnitudeProduct = this.magnitude() * other.magnitude();\r\n\r\n    // Handle parallel vectors (dotProduct â‰ˆ magnitudeProduct)\r\n    if (Math.abs(dotProduct - magnitudeProduct) < Number.EPSILON) {\r\n      return dotProduct >= 0 ? 0 : Math.PI;\r\n    }\r\n\r\n    // Handle zero vectors\r\n    if (magnitudeProduct === 0) {\r\n      return 0; // Or return NaN if you prefer\r\n    }\r\n\r\n    const cosTheta = dotProduct / magnitudeProduct;\r\n    let angle = Math.acos(cosTheta);\r\n\r\n    // Use the cross product to determine the sign of the angle\r\n    const crossProductZ = this.x * other.y - this.y * other.x; // 2D cross product\r\n    if (crossProductZ < 0) {\r\n      angle = 2 * Math.PI - angle;\r\n    }\r\n\r\n    return angle;\r\n  }\r\n\r\n  /**\r\n   * Get a string representation of this vector.\r\n   * @returns {string} A string representation of the vector.\r\n   */\r\n  toString() {\r\n    return `(${this.x}, ${this.y})`;\r\n  }\r\n\r\n  /**\r\n   * Create a vector from two points.\r\n   * @param {Object} p1 - The first point with x and y properties.\r\n   * @param {Object} p2 - The second point with x and y properties.\r\n   * @returns {Vector} The resulting vector.\r\n   */\r\n  static fromPoints(p1, p2) {\r\n    return new Vector(p2.x - p1.x, p2.y - p1.y);\r\n  }\r\n}"],"names":[],"mappings":"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"}