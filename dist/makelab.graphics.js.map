{"version":3,"file":"makelab.graphics.js","sources":["../src/lib/math/math-utils.js","../src/lib/graphics/color-utils.js","../src/lib/math/vector.js","../src/lib/graphics/line-segment.js"],"sourcesContent":["/**\r\n * Converts degrees to radians.\r\n *\r\n * @param {number} degrees - The angle in degrees to be converted to radians.\r\n * @returns {number} The angle in radians.\r\n */\r\nexport function convertToRadians(degrees) {\r\n  return degrees * (Math.PI / 180);\r\n}\r\n\r\n/**\r\n * Converts an angle from radians to degrees.\r\n *\r\n * @param {number} radians - The angle in radians to be converted.\r\n * @returns {number} The angle in degrees.\r\n */\r\nexport function convertToDegrees(radians) {\r\n  return radians * (180 / Math.PI);\r\n}\r\n\r\n/**\r\n * Linearly interpolates between two values.\r\n *\r\n * @param {number} start - The starting value.\r\n * @param {number} end - The ending value.\r\n * @param {number} amt - The interpolation amount (0-1).\r\n * @returns {number} The interpolated value.\r\n */\r\nexport function lerp(start, end, amt) {\r\n  return (1 - amt) * start + amt * end;\r\n}\r\n\r\n/**\r\n * Generates a random number within a specified range (similar to p5js random)\r\n * If only one argument is provided, it generates a number between 0 and the argument.\r\n * If two arguments are provided, it generates a number between the two arguments.\r\n * \r\n * @param {number} min - The minimum value (inclusive) or the maximum value if only one argument is provided.\r\n * @param {number} [max] - The maximum value (exclusive).\r\n * @returns {number} A random number within the specified range.\r\n */\r\nexport function random(min, max) {\r\n  if (max === undefined) {\r\n    max = min;\r\n    min = 0;\r\n  }\r\n  return Math.random() * (max - min) + min;\r\n}","import { lerp } from '../math/math-utils.js';\r\n\r\n/**\r\n * Linearly interpolates between two colors.\r\n *\r\n * @param {Object|string} startColor - The starting color. Can be an object with r, g, b, and \r\n *  optionally alpha fields, or a string in a valid CSS color format.\r\n * @param {Object|string} endColor - The ending color. Can be an object with r, g, b, and \r\n *  optionally alpha fields, or a string in a valid CSS color format.\r\n * @param {number} amt - The amount to interpolate between the two colors. Should be a value between 0 and 1.\r\n * @returns {string} The interpolated color in rgba format.\r\n */\r\nexport function lerpColor(startColor, endColor, amt) {\r\n  // console.log(`lerpColor: startColor: ${startColor}, endColor: ${endColor}, amt: ${amt}`);\r\n\r\n  // Ensure both colors are objects with r, g, b, and optionally a properties\r\n  startColor = convertColorStringToObject(startColor);\r\n  endColor = convertColorStringToObject(endColor);\r\n\r\n  const r = Math.round(lerp(startColor.r, endColor.r, amt));\r\n  const g = Math.round(lerp(startColor.g, endColor.g, amt));\r\n  const b = Math.round(lerp(startColor.b, endColor.b, amt));\r\n  const a = lerp(startColor.a || 1, endColor.a || 1, amt); // Default to 1 if a property is missing\r\n\r\n  return `rgba(${r}, ${g}, ${b}, ${a})`;\r\n}\r\n\r\n/**\r\n * Converts a color string (hex, rgb, or rgba) to an object with r, g, b, and optionally a properties.\r\n * If the input is already an object, it returns the input as is.\r\n *\r\n * @param {string|Object} colorStr - The color string or object to convert.\r\n * @returns {Object} An object with properties r, g, b, and optionally a.\r\n * @throws {Error} If the color string format is invalid.\r\n */\r\nexport function convertColorStringToObject(colorStr) {\r\n  if (typeof colorStr === 'string') {\r\n    // Handle hexstring, rgb, or rgba string\r\n    const match = colorStr.match(/^#([0-9a-fA-F]{6}|[0-9a-fA-F]{3}|[0-9a-fA-F]{8})$/);\r\n    if (match) {\r\n      // Hexstring\r\n      const hex = match[1];\r\n      if (hex.length === 8) {\r\n        // 8-digit hex string with alpha\r\n        return {\r\n          r: parseInt(hex.substring(0, 2), 16),\r\n          g: parseInt(hex.substring(2, 4), 16),\r\n          b: parseInt(hex.substring(4, 6), 16),\r\n          a: parseInt(hex.substring(6, 8), 16) / 255\r\n        };\r\n      } else {\r\n        // 6-digit hex string without alpha\r\n        return {\r\n          r: parseInt(hex.substring(0, 2), 16),\r\n          g: parseInt(hex.substring(2, 4), 16),\r\n          b: parseInt(hex.substring(4, 6), 16),\r\n          a: 1 // Default to 1 if alpha is not specified\r\n        };\r\n      }\r\n    } else if (colorStr.startsWith('rgb')) {\r\n      // rgb or rgba string\r\n      const match = colorStr.match(/rgba?\\((\\d+), (\\d+), (\\d+)(?:, (\\d?\\.\\d+))?\\)/);\r\n      if (match) {\r\n        const [, r, g, b, a] = match;\r\n        return {\r\n          r: parseInt(r),\r\n          g: parseInt(g),\r\n          b: parseInt(b),\r\n          a: a !== undefined ? parseFloat(a) : 1 // Default to 1 if alpha is not specified\r\n        };\r\n      }\r\n    }\r\n    throw new Error(`Invalid color string: ${colorStr}`);\r\n  }\r\n\r\n  // If it's already an object, return it\r\n  return colorStr;\r\n}","/**\r\n * Class representing a 2D vector.\r\n */\r\nexport class Vector {\r\n  /**\r\n   * Create a vector.\r\n   * @param {number} x - The x coordinate.\r\n   * @param {number} y - The y coordinate.\r\n   */\r\n  constructor(x, y) {\r\n    this.x = x;\r\n    this.y = y;\r\n  }\r\n\r\n  /**\r\n   * Add another vector to this vector.\r\n   * @param {Vector} other - The vector to add.\r\n   * @returns {Vector} The resulting vector.\r\n   */\r\n  add(other) {\r\n    return new Vector(this.x + other.x, this.y + other.y);\r\n  }\r\n\r\n  /**\r\n   * Subtract another vector from this vector.\r\n   * @param {Vector} other - The vector to subtract.\r\n   * @returns {Vector} The resulting vector.\r\n   */\r\n  subtract(other) {\r\n    return new Vector(this.x - other.x, this.y - other.y);\r\n  }\r\n\r\n  /**\r\n   * Multiply this vector by a scalar.\r\n   * @param {number} scalar - The scalar to multiply by.\r\n   * @returns {Vector} The resulting vector.\r\n   */\r\n  multiply(scalar) {\r\n    return new Vector(this.x * scalar, this.y * scalar);\r\n  }\r\n\r\n  /**\r\n   * Divide this vector by a scalar.\r\n   * @param {number} scalar - The scalar to divide by.\r\n   * @returns {Vector} The resulting vector.\r\n   */\r\n  divide(scalar) {\r\n    return new Vector(this.x / scalar, this.y / scalar);\r\n  }\r\n\r\n  /**\r\n   * Calculate the magnitude (length) of this vector.\r\n   * @returns {number} The magnitude of the vector.\r\n   */\r\n  magnitude() {\r\n    return Math.sqrt(this.x * this.x + this.y * this.y);\r\n  }\r\n\r\n  /**\r\n   * Normalize this vector (make it have a magnitude of 1).\r\n   * @returns {Vector} The normalized vector.\r\n   */\r\n  normalize() {\r\n    const mag = this.magnitude();\r\n    return new Vector(this.x / mag, this.y / mag);\r\n  }\r\n\r\n  /**\r\n   * Calculate the dot product of this vector and another vector.\r\n   * @param {Vector} other - The other vector.\r\n   * @returns {number} The dot product.\r\n   */\r\n  dotProduct(other) {\r\n    return this.x * other.x + this.y * other.y;\r\n  }\r\n\r\n  /**\r\n   * Calculate the angle between this vector and another vector.\r\n   * @param {Vector} other - The other vector.\r\n   * @returns {number} The angle in radians.\r\n   */\r\n  angleBetween(other) {\r\n    // const cosTheta = this.dotProduct(other) / (this.magnitude() * other.magnitude());\r\n    // return Math.acos(cosTheta);\r\n\r\n    const dotProduct = this.dotProduct(other);\r\n    const magnitudeProduct = this.magnitude() * other.magnitude();\r\n\r\n    // Handle parallel vectors (dotProduct â‰ˆ magnitudeProduct)\r\n    if (Math.abs(dotProduct - magnitudeProduct) < Number.EPSILON) {\r\n      return dotProduct >= 0 ? 0 : Math.PI;\r\n    }\r\n\r\n    // Handle zero vectors\r\n    if (magnitudeProduct === 0) {\r\n      return 0; // Or return NaN if you prefer\r\n    }\r\n\r\n    const cosTheta = dotProduct / magnitudeProduct;\r\n    let angle = Math.acos(cosTheta);\r\n\r\n    // Use the cross product to determine the sign of the angle\r\n    const crossProductZ = this.x * other.y - this.y * other.x; // 2D cross product\r\n    if (crossProductZ < 0) {\r\n      angle = 2 * Math.PI - angle;\r\n    }\r\n\r\n    return angle;\r\n  }\r\n\r\n  /**\r\n   * Get a string representation of this vector.\r\n   * @returns {string} A string representation of the vector.\r\n   */\r\n  toString() {\r\n    return `(${this.x}, ${this.y})`;\r\n  }\r\n\r\n  /**\r\n   * Create a vector from two points.\r\n   * @param {Object} p1 - The first point with x and y properties.\r\n   * @param {Object} p2 - The second point with x and y properties.\r\n   * @returns {Vector} The resulting vector.\r\n   */\r\n  static fromPoints(p1, p2) {\r\n    return new Vector(p2.x - p1.x, p2.y - p1.y);\r\n  }\r\n}","// This library provides basic line segment functionality, including drawing\r\n// and vector operations\r\n//\r\n// By Jon E. Froehlich\r\n// UW CSE Professor\r\n// http://makeabilitylab.io/\r\n//\r\nimport { Vector } from '../math/vector.js';\r\nimport { convertToRadians, convertToDegrees } from '../math/math-utils.js';\r\n\r\nexport class LineSegment {\r\n  /**\r\n   * Creates an instance of a line segment.\r\n   * \r\n   * @constructor\r\n   * @param {number|object} x1 - The x-coordinate of the first point or a vector object.\r\n   * @param {number|object} y1 - The y-coordinate of the first point or a vector object.\r\n   * @param {number} [x2] - The x-coordinate of the second point (optional if x1 and y1 are vectors).\r\n   * @param {number} [y2] - The y-coordinate of the second point (optional if x1 and y1 are vectors).\r\n   */\r\n  constructor(x1, y1, x2, y2) {\r\n    //x1 and y1 can either be vectors or the points for p1\r\n    if (arguments.length == 2 && typeof x1 === 'object' &&\r\n      typeof y1 === 'object') {\r\n      this.pt1 = x1;\r\n      this.pt2 = y1;\r\n    } else {\r\n      this.pt1 = new Vector(x1, y1);\r\n      this.pt2 = new Vector(x2, y2);\r\n    }\r\n\r\n    this.fontSize = 10;\r\n    this.strokeColor = \"black\";\r\n    this.isDashedLine = false;\r\n    this.drawTextLabels = true;\r\n    this.drawTextMagnitude = true;\r\n    this.drawTextAngle = true;\r\n    this.strokeWeight = 2;\r\n  }\r\n\r\n  /**\r\n   * Returns x1\r\n   */\r\n  get x1() {\r\n    return this.pt1.x;\r\n  }\r\n\r\n  /**\r\n   * Set x1\r\n   */\r\n  set x1(val) {\r\n    this.pt1.x = val;\r\n  }\r\n\r\n  /**\r\n   * Returns y1\r\n   */\r\n  get y1() {\r\n    return this.pt1.y;\r\n  }\r\n\r\n  /**\r\n   * Set y1\r\n   */\r\n  set y1(val) {\r\n    this.pt1.y = val;\r\n  }\r\n\r\n  /**\r\n   * Returns x2\r\n   */\r\n  get x2() {\r\n    return this.pt2.x;\r\n  }\r\n\r\n  /**\r\n   * Set x2\r\n   */\r\n  set x2(val) {\r\n    this.pt2.x = val;\r\n  }\r\n\r\n  /**\r\n   * Returns y2\r\n   */\r\n  get y2() {\r\n    return this.pt2.y;\r\n  }\r\n\r\n  /**\r\n   * Set y2\r\n   */\r\n  set y2(val) {\r\n    this.pt2.y = val;\r\n  }\r\n\r\n  /**\r\n   * Returns the heading of the line segment in radians between 0 and 2*PI.\r\n   */\r\n  getHeading() {\r\n    const diffVector = this.pt2.subtract(this.pt1);\r\n    let heading = Math.atan2(diffVector.y, diffVector.x);\r\n\r\n    if (heading < 0) {\r\n      heading += 2 * Math.PI;\r\n    }\r\n    return heading;\r\n  }\r\n\r\n  /**\r\n   * Returns the two normals for the line segment (one normal for each direction)\r\n   */\r\n  getNormals() {\r\n    return calculateNormals(this.pt1, this.pt2);\r\n  }\r\n\r\n  /**\r\n   * Returns one of the normals for this line segment. To get both\r\n   * normals, call getNormals()\r\n   */\r\n  getNormal() {\r\n    return this.getNormals()[0];\r\n  }\r\n\r\n  /**\r\n   * Calculates the vector representing the line segment moved to the origin.\r\n   *\r\n   * @returns {Vector} The vector representing the line segment at the origin.\r\n   */\r\n  getVectorAtOrigin() {\r\n    return this.pt2.subtract(this.pt1);\r\n  }\r\n\r\n  /**\r\n   * Gets the angles between this line segment and the given vector or line segment.\r\n   * Returns both the counterclockwise and clockwise angles in radians.\r\n   *\r\n   * @param {Vector|LineSegment} vectorOrLineSegment The other vector or line segment.\r\n   * @returns {Object} An object containing both the counterclockwise and clockwise angles in radians.\r\n   */\r\n  getAnglesBetween(vectorOrLineSegment) {\r\n    const v1 = this.getVectorAtOrigin();\r\n    let v2;\r\n\r\n    if (vectorOrLineSegment instanceof LineSegment) {\r\n      v2 = vectorOrLineSegment.getVectorAtOrigin();\r\n    } else {\r\n      v2 = vectorOrLineSegment;\r\n    }\r\n\r\n    let angleBetweenRadians = v1.angleBetween(v2);\r\n    console.log(`angleBetweenDegrees: ${convertToDegrees(angleBetweenRadians).toFixed(1)}`);\r\n\r\n    // Ensure the angle is between 0 and 2*PI\r\n    if (angleBetweenRadians < 0) {\r\n      angleBetweenRadians += 2 * Math.PI;\r\n    }\r\n\r\n    // Calculate the counterclockwise and clockwise angles\r\n    const clockwiseAngle = angleBetweenRadians;\r\n    const counterclockwiseAngle = 2 * Math.PI - angleBetweenRadians;\r\n    \r\n    return {\r\n      counterclockwiseAngle,\r\n      clockwiseAngle\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Calculates the orthogonal projection of vector p onto this line segment.\r\n   * \r\n   * @param {Vector} p The vector to project onto the line segment.\r\n   * @returns {Vector} The orthogonal projection of p onto the line segment.\r\n   */\r\n  getOrthogonalProjection(p) {\r\n    // http://mathonline.wikidot.com/orthogonal-projections\r\n\r\n    const d1 = this.pt2.subtract(this.pt1); // Direction vector of the line segment\r\n    const d2 = p.subtract(this.pt1); // Vector from point p to the first point of the line segment\r\n\r\n    const l1 = d1.magnitude(); // Length of the line segment\r\n\r\n    const dotProduct = Math.min(Math.max(d2.dotProduct(d1.normalize()), 0), l1); // Constrain dot product between 0 and l1\r\n\r\n    return this.pt1.add(d1.multiply(dotProduct)); // Project p onto the line segment\r\n  }\r\n\r\n  /**\r\n   * Returns the minimum distance between this line segment and the given point p.\r\n   * \r\n   * @param {Vector} p The point to calculate the distance to.\r\n   * @returns {number} The minimum distance between the line segment and the point.\r\n   */\r\n  getDistance(p) {\r\n    const op = this.getOrthogonalProjection(p);\r\n    return p.subtract(op).magnitude();\r\n  }\r\n\r\n  /**\r\n   * Returns the magnitude of this vector as a floating point number.\r\n   * \r\n   * @returns {number} The magnitude of the line segment.\r\n   */\r\n  getMagnitude() {\r\n    return this.pt2.subtract(this.pt1).magnitude();\r\n  }\r\n\r\n  /**\r\n   * Sets the magnitude of the line segment to the given number.\r\n   * \r\n   * @param {number} len The desired magnitude of the line segment.\r\n   */\r\n  setMagnitude(len) {\r\n    const diffVector = this.pt2.subtract(this.pt1).normalize().multiply(len);\r\n    this.pt2 = this.pt1.add(diffVector);\r\n  }\r\n\r\n  /**\r\n   * Draws the line segment on the provided canvas context.\r\n   * \r\n   * @param {CanvasRenderingContext2D} ctx - The canvas rendering context to draw on.\r\n   */\r\n  draw(ctx) {\r\n    ctx.strokeStyle = this.strokeColor;\r\n    ctx.lineWidth = this.strokeWeight;\r\n  \r\n    if (this.isDashedLine) {\r\n      ctx.setLineDash([5, 15]);\r\n    }\r\n  \r\n    this.drawArrow(ctx, this.pt1, this.pt2.subtract(this.pt1), this.strokeColor); \r\n  \r\n    // Draw text labels (optional)\r\n    if (this.drawTextLabels) {\r\n      ctx.font = `${this.fontSize}px Arial`; // Replace with your desired font and size\r\n      ctx.textAlign = \"left\";\r\n      ctx.textBaseline = \"top\";\r\n      ctx.fillStyle = this.strokeColor; // Or any other desired color\r\n  \r\n      const label = this.generateLabel();\r\n      const labelWidth = ctx.measureText(label).width;\r\n      ctx.fillText(label, -labelWidth - 3, 12);\r\n    }\r\n  }\r\n\r\n  drawArrow(ctx, p1, p2, color) {\r\n    const headLength = 10; // Length of the arrow head\r\n    const angle = Math.atan2(p2.y, p2.x);\r\n\r\n    ctx.save();\r\n    ctx.strokeStyle = color;\r\n    ctx.fillStyle = color;\r\n\r\n    // Draw the line\r\n    ctx.beginPath();\r\n    ctx.moveTo(p1.x, p1.y);\r\n    ctx.lineTo(p1.x + p2.x, p1.y + p2.y);\r\n    ctx.stroke();\r\n\r\n    // Draw the arrow head\r\n    ctx.beginPath();\r\n    ctx.moveTo(p1.x + p2.x, p1.y + p2.y);\r\n    ctx.lineTo(p1.x + p2.x - headLength * Math.cos(angle - Math.PI / 6), p1.y + p2.y - headLength * Math.sin(angle - Math.PI / 6));\r\n    ctx.lineTo(p1.x + p2.x - headLength * Math.cos(angle + Math.PI / 6), p1.y + p2.y - headLength * Math.sin(angle + Math.PI / 6));\r\n    ctx.lineTo(p1.x + p2.x, p1.y + p2.y);\r\n    ctx.lineTo(p1.x + p2.x - headLength * Math.cos(angle - Math.PI / 6), p1.y + p2.y - headLength * Math.sin(angle - Math.PI / 6));\r\n    ctx.stroke();\r\n    ctx.fill();\r\n    ctx.restore();\r\n  }\r\n  \r\n  /**\r\n   * Generates the label to be displayed on the line segment.\r\n   *\r\n   * @returns {string} The label text.\r\n   */\r\n  generateLabel() {\r\n    let label = \"\";\r\n    if (this.drawTextAngle) {\r\n      const angleDegrees = Math.round(Math.atan2(this.pt2.y - this.pt1.y, this.pt2.x - this.pt1.x) * 180 / Math.PI);\r\n      label += `${angleDegrees}Â°`;\r\n    }\r\n  \r\n    if (this.drawTextAngle && this.drawTextMagnitude) {\r\n      label += \" \";\r\n    }\r\n  \r\n    if (this.drawTextMagnitude) {\r\n      label += `|${this.getMagnitude().toFixed(1)}|`;\r\n    }\r\n  \r\n    return label;\r\n  }\r\n\r\n  /**\r\n   * Draws positive and negative angle arcs between two line segments on a canvas context.\r\n   *\r\n   * @param {CanvasRenderingContext2D} ctx - The canvas rendering context.\r\n   * @param {Object} lineSegment1 - The first line segment.\r\n   * @param {Object} lineSegment2 - The second line segment.\r\n   * @param {string} clockwiseArcColor - The color of arc1\r\n   * @param {string} counterclockwiseArcColor - The color of arc2\r\n   * @param {number} [clockwiseArcRadius=50] - The size of the positive angle arc.\r\n   * @param {number} [counterclockwiseArcRadius=30] - The size of the negative angle arc.\r\n   */\r\n  static drawAngleArcs(ctx, lineSegment1, lineSegment2, clockwiseArcColor='blue', \r\n    counterclockwiseArcColor='red', clockwiseArcRadius = 50, counterclockwiseArcRadius = 30) {\r\n    \r\n    const lineSeg1AngleRadians = lineSegment1.getHeading();\r\n    const angles = lineSegment1.getAnglesBetween(lineSegment2);\r\n\r\n    console.log(`CW angle ${convertToDegrees(angles.clockwiseAngle).toFixed(1)} CCW angle ${convertToDegrees(angles.counterclockwiseAngle).toFixed(1)}`);\r\n    //console.log(`Counterclockwise Angle: ${angles.counterclockwiseAngle} radians (${convertToDegrees(angles.counterclockwiseAngle).toFixed(1)}Â°)`);\r\n    //console.log(`Clockwise Angle: ${angles.clockwiseAngle} radians (${convertToDegrees(angles.clockwiseAngle).toFixed(1)}Â°)`);\r\n    // console.log(`Old angle Between: ${angleBetweenLineSegmentsInRadians} radians (${convertToDegrees(angleBetweenLineSegmentsInRadians).toFixed(1)}Â°)`);\r\n    \r\n    ctx.save();\r\n\r\n    // Draw the clockwise arc\r\n    // arc(x, y, radius, startAngle, endAngle, counterclockwise)\r\n    ctx.beginPath();\r\n    ctx.arc(lineSegment1.pt1.x, lineSegment1.pt1.y, clockwiseArcRadius, \r\n      lineSeg1AngleRadians, lineSeg1AngleRadians + angles.clockwiseAngle, false);\r\n    ctx.strokeStyle = clockwiseArcColor;\r\n    //ctx.setLineDash([2, 5]);\r\n    ctx.stroke();\r\n\r\n    // Draw the clockwise angle text\r\n    const clockwiseArcMiddleVector = new Vector(\r\n      lineSegment1.pt1.x + clockwiseArcRadius * 1.35 * Math.cos(lineSeg1AngleRadians + angles.clockwiseAngle / 2),\r\n      lineSegment1.pt1.y + clockwiseArcRadius * 1.35 * Math.sin(lineSeg1AngleRadians + angles.clockwiseAngle / 2)\r\n    );\r\n  \r\n    ctx.font = \"12px Arial\"; // Replace with your desired font and size\r\n    ctx.textAlign = \"center\";\r\n    ctx.textBaseline = \"middle\";\r\n    ctx.fillStyle = clockwiseArcColor;\r\n  \r\n    const clockwiseAngleDegrees = convertToDegrees(angles.clockwiseAngle);\r\n    const clockwiseAngleDegreesLabel = `${clockwiseAngleDegrees.toFixed(1)}Â°`;\r\n    ctx.fillText(clockwiseAngleDegreesLabel, clockwiseArcMiddleVector.x, clockwiseArcMiddleVector.y);\r\n\r\n    // Draw the counterclockwise arc\r\n    ctx.beginPath();\r\n    ctx.arc(lineSegment1.pt1.x, lineSegment1.pt1.y, counterclockwiseArcRadius,\r\n      lineSeg1AngleRadians, lineSeg1AngleRadians - angles.counterclockwiseAngle, true);\r\n    ctx.strokeStyle = counterclockwiseArcColor;\r\n    ctx.stroke();\r\n\r\n    // Draw the counterclockwise angle text\r\n    const counterclockwiseArcMiddleVector = new Vector(\r\n      lineSegment1.pt1.x + counterclockwiseArcRadius * 1.5 * Math.cos(lineSeg1AngleRadians - angles.counterclockwiseAngle / 2),\r\n      lineSegment1.pt1.y + counterclockwiseArcRadius * 1.5 * Math.sin(lineSeg1AngleRadians - angles.counterclockwiseAngle / 2)\r\n    );\r\n\r\n    const counterclockwiseAngleDegrees = convertToDegrees(angles.counterclockwiseAngle);\r\n    const counterclockwiseAngleDegreesLabel = `${counterclockwiseAngleDegrees.toFixed(1)}Â°`;\r\n    ctx.fillStyle = counterclockwiseArcColor;\r\n    ctx.fillText(counterclockwiseAngleDegreesLabel, counterclockwiseArcMiddleVector.x, counterclockwiseArcMiddleVector.y);\r\n  \r\n    ctx.restore();\r\n  }\r\n}\r\n\r\n/**\r\n * Calculates the two normals for the line segment (one normal for each direction).\r\n * \r\n * @param {Vector} pt1 The first point in the line segment.\r\n * @param {Vector} pt2 The second point in the line segment.\r\n * @returns {Vector[]} An array containing two Vector objects representing the normals.\r\n */\r\nfunction calculateNormals(pt1, pt2) {\r\n  // From: https://stackoverflow.com/a/1243676  \r\n  // https://www.mathworks.com/matlabcentral/answers/85686-how-to-calculate-normal-to-a-line\r\n  //  V = B - A;\r\n  //  normal1 = [ V(2), -V(1)];\r\n  //  normal2 = [-V(2), V(1)];\r\n\r\n  const v = pt2.subtract(pt1);\r\n  return [new Vector(v.y, -v.x), new Vector(-v.y, v.x)];\r\n}"],"names":[],"mappings":"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"}