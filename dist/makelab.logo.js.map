{"version":3,"file":"makelab.logo.js","sources":["../src/lib/math/vector.js","../src/lib/math/math-utils.js","../src/lib/graphics/line-segment.js","../src/lib/makelab-logo.js"],"sourcesContent":["/**\r\n * Class representing a 2D vector.\r\n */\r\nexport class Vector {\r\n  /**\r\n   * Create a vector.\r\n   * @param {number} x - The x coordinate.\r\n   * @param {number} y - The y coordinate.\r\n   */\r\n  constructor(x, y) {\r\n    this.x = x;\r\n    this.y = y;\r\n  }\r\n\r\n  /**\r\n   * Add another vector to this vector.\r\n   * @param {Vector} other - The vector to add.\r\n   * @returns {Vector} The resulting vector.\r\n   */\r\n  add(other) {\r\n    return new Vector(this.x + other.x, this.y + other.y);\r\n  }\r\n\r\n  /**\r\n   * Subtract another vector from this vector.\r\n   * @param {Vector} other - The vector to subtract.\r\n   * @returns {Vector} The resulting vector.\r\n   */\r\n  subtract(other) {\r\n    return new Vector(this.x - other.x, this.y - other.y);\r\n  }\r\n\r\n  /**\r\n   * Multiply this vector by a scalar.\r\n   * @param {number} scalar - The scalar to multiply by.\r\n   * @returns {Vector} The resulting vector.\r\n   */\r\n  multiply(scalar) {\r\n    return new Vector(this.x * scalar, this.y * scalar);\r\n  }\r\n\r\n  /**\r\n   * Divide this vector by a scalar.\r\n   * @param {number} scalar - The scalar to divide by.\r\n   * @returns {Vector} The resulting vector.\r\n   */\r\n  divide(scalar) {\r\n    return new Vector(this.x / scalar, this.y / scalar);\r\n  }\r\n\r\n  /**\r\n   * Calculate the magnitude (length) of this vector.\r\n   * @returns {number} The magnitude of the vector.\r\n   */\r\n  magnitude() {\r\n    return Math.sqrt(this.x * this.x + this.y * this.y);\r\n  }\r\n\r\n  /**\r\n   * Normalize this vector (make it have a magnitude of 1).\r\n   * @returns {Vector} The normalized vector.\r\n   */\r\n  normalize() {\r\n    const mag = this.magnitude();\r\n    return new Vector(this.x / mag, this.y / mag);\r\n  }\r\n\r\n  /**\r\n   * Calculate the dot product of this vector and another vector.\r\n   * @param {Vector} other - The other vector.\r\n   * @returns {number} The dot product.\r\n   */\r\n  dotProduct(other) {\r\n    return this.x * other.x + this.y * other.y;\r\n  }\r\n\r\n  /**\r\n   * Calculate the angle between this vector and another vector.\r\n   * @param {Vector} other - The other vector.\r\n   * @returns {number} The angle in radians.\r\n   */\r\n  angleBetween(other) {\r\n    // const cosTheta = this.dotProduct(other) / (this.magnitude() * other.magnitude());\r\n    // return Math.acos(cosTheta);\r\n\r\n    const dotProduct = this.dotProduct(other);\r\n    const magnitudeProduct = this.magnitude() * other.magnitude();\r\n\r\n    // Handle parallel vectors (dotProduct â‰ˆ magnitudeProduct)\r\n    if (Math.abs(dotProduct - magnitudeProduct) < Number.EPSILON) {\r\n      return dotProduct >= 0 ? 0 : Math.PI;\r\n    }\r\n\r\n    // Handle zero vectors\r\n    if (magnitudeProduct === 0) {\r\n      return 0; // Or return NaN if you prefer\r\n    }\r\n\r\n    const cosTheta = dotProduct / magnitudeProduct;\r\n    let angle = Math.acos(cosTheta);\r\n\r\n    // Use the cross product to determine the sign of the angle\r\n    const crossProductZ = this.x * other.y - this.y * other.x; // 2D cross product\r\n    if (crossProductZ < 0) {\r\n      angle = 2 * Math.PI - angle;\r\n    }\r\n\r\n    return angle;\r\n  }\r\n\r\n  /**\r\n   * Get a string representation of this vector.\r\n   * @returns {string} A string representation of the vector.\r\n   */\r\n  toString() {\r\n    return `(${this.x}, ${this.y})`;\r\n  }\r\n\r\n  /**\r\n   * Create a vector from two points.\r\n   * @param {Object} p1 - The first point with x and y properties.\r\n   * @param {Object} p2 - The second point with x and y properties.\r\n   * @returns {Vector} The resulting vector.\r\n   */\r\n  static fromPoints(p1, p2) {\r\n    return new Vector(p2.x - p1.x, p2.y - p1.y);\r\n  }\r\n}","/**\r\n * Converts degrees to radians.\r\n *\r\n * @param {number} degrees - The angle in degrees to be converted to radians.\r\n * @returns {number} The angle in radians.\r\n */\r\nexport function convertToRadians(degrees) {\r\n  return degrees * (Math.PI / 180);\r\n}\r\n\r\n/**\r\n * Converts an angle from radians to degrees.\r\n *\r\n * @param {number} radians - The angle in radians to be converted.\r\n * @returns {number} The angle in degrees.\r\n */\r\nexport function convertToDegrees(radians) {\r\n  return radians * (180 / Math.PI);\r\n}\r\n\r\n/**\r\n * Linearly interpolates between two values.\r\n *\r\n * @param {number} start - The starting value.\r\n * @param {number} end - The ending value.\r\n * @param {number} amt - The interpolation amount (0-1).\r\n * @returns {number} The interpolated value.\r\n */\r\nexport function lerp(start, end, amt) {\r\n  return (1 - amt) * start + amt * end;\r\n}\r\n\r\n/**\r\n * Generates a random number within a specified range (similar to p5js random)\r\n * If only one argument is provided, it generates a number between 0 and the argument.\r\n * If two arguments are provided, it generates a number between the two arguments.\r\n * \r\n * @param {number} min - The minimum value (inclusive) or the maximum value if only one argument is provided.\r\n * @param {number} [max] - The maximum value (exclusive).\r\n * @returns {number} A random number within the specified range.\r\n */\r\nexport function random(min, max) {\r\n  if (max === undefined) {\r\n    max = min;\r\n    min = 0;\r\n  }\r\n  return Math.random() * (max - min) + min;\r\n}","// This library provides basic line segment functionality, including drawing\r\n// and vector operations\r\n//\r\n// By Jon E. Froehlich\r\n// UW CSE Professor\r\n// http://makeabilitylab.io/\r\n//\r\nimport { Vector } from '../math/vector.js';\r\nimport { convertToRadians, convertToDegrees } from '../math/math-utils.js';\r\n\r\nexport class LineSegment {\r\n  /**\r\n   * Creates an instance of a line segment.\r\n   * \r\n   * @constructor\r\n   * @param {number|object} x1 - The x-coordinate of the first point or a vector object.\r\n   * @param {number|object} y1 - The y-coordinate of the first point or a vector object.\r\n   * @param {number} [x2] - The x-coordinate of the second point (optional if x1 and y1 are vectors).\r\n   * @param {number} [y2] - The y-coordinate of the second point (optional if x1 and y1 are vectors).\r\n   */\r\n  constructor(x1, y1, x2, y2) {\r\n    //x1 and y1 can either be vectors or the points for p1\r\n    if (arguments.length == 2 && typeof x1 === 'object' &&\r\n      typeof y1 === 'object') {\r\n      this.pt1 = x1;\r\n      this.pt2 = y1;\r\n    } else {\r\n      this.pt1 = new Vector(x1, y1);\r\n      this.pt2 = new Vector(x2, y2);\r\n    }\r\n\r\n    this.fontSize = 10;\r\n    this.strokeColor = \"black\";\r\n    this.isDashedLine = false;\r\n    this.drawTextLabels = true;\r\n    this.drawTextMagnitude = true;\r\n    this.drawTextAngle = true;\r\n    this.strokeWeight = 2;\r\n  }\r\n\r\n  /**\r\n   * Returns x1\r\n   */\r\n  get x1() {\r\n    return this.pt1.x;\r\n  }\r\n\r\n  /**\r\n   * Set x1\r\n   */\r\n  set x1(val) {\r\n    this.pt1.x = val;\r\n  }\r\n\r\n  /**\r\n   * Returns y1\r\n   */\r\n  get y1() {\r\n    return this.pt1.y;\r\n  }\r\n\r\n  /**\r\n   * Set y1\r\n   */\r\n  set y1(val) {\r\n    this.pt1.y = val;\r\n  }\r\n\r\n  /**\r\n   * Returns x2\r\n   */\r\n  get x2() {\r\n    return this.pt2.x;\r\n  }\r\n\r\n  /**\r\n   * Set x2\r\n   */\r\n  set x2(val) {\r\n    this.pt2.x = val;\r\n  }\r\n\r\n  /**\r\n   * Returns y2\r\n   */\r\n  get y2() {\r\n    return this.pt2.y;\r\n  }\r\n\r\n  /**\r\n   * Set y2\r\n   */\r\n  set y2(val) {\r\n    this.pt2.y = val;\r\n  }\r\n\r\n  /**\r\n   * Returns the heading of the line segment in radians between 0 and 2*PI.\r\n   */\r\n  getHeading() {\r\n    const diffVector = this.pt2.subtract(this.pt1);\r\n    let heading = Math.atan2(diffVector.y, diffVector.x);\r\n\r\n    if (heading < 0) {\r\n      heading += 2 * Math.PI;\r\n    }\r\n    return heading;\r\n  }\r\n\r\n  /**\r\n   * Returns the two normals for the line segment (one normal for each direction)\r\n   */\r\n  getNormals() {\r\n    return calculateNormals(this.pt1, this.pt2);\r\n  }\r\n\r\n  /**\r\n   * Returns one of the normals for this line segment. To get both\r\n   * normals, call getNormals()\r\n   */\r\n  getNormal() {\r\n    return this.getNormals()[0];\r\n  }\r\n\r\n  /**\r\n   * Calculates the vector representing the line segment moved to the origin.\r\n   *\r\n   * @returns {Vector} The vector representing the line segment at the origin.\r\n   */\r\n  getVectorAtOrigin() {\r\n    return this.pt2.subtract(this.pt1);\r\n  }\r\n\r\n  /**\r\n   * Gets the angles between this line segment and the given vector or line segment.\r\n   * Returns both the counterclockwise and clockwise angles in radians.\r\n   *\r\n   * @param {Vector|LineSegment} vectorOrLineSegment The other vector or line segment.\r\n   * @returns {Object} An object containing both the counterclockwise and clockwise angles in radians.\r\n   */\r\n  getAnglesBetween(vectorOrLineSegment) {\r\n    const v1 = this.getVectorAtOrigin();\r\n    let v2;\r\n\r\n    if (vectorOrLineSegment instanceof LineSegment) {\r\n      v2 = vectorOrLineSegment.getVectorAtOrigin();\r\n    } else {\r\n      v2 = vectorOrLineSegment;\r\n    }\r\n\r\n    let angleBetweenRadians = v1.angleBetween(v2);\r\n    console.log(`angleBetweenDegrees: ${convertToDegrees(angleBetweenRadians).toFixed(1)}`);\r\n\r\n    // Ensure the angle is between 0 and 2*PI\r\n    if (angleBetweenRadians < 0) {\r\n      angleBetweenRadians += 2 * Math.PI;\r\n    }\r\n\r\n    // Calculate the counterclockwise and clockwise angles\r\n    const clockwiseAngle = angleBetweenRadians;\r\n    const counterclockwiseAngle = 2 * Math.PI - angleBetweenRadians;\r\n    \r\n    return {\r\n      counterclockwiseAngle,\r\n      clockwiseAngle\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Calculates the orthogonal projection of vector p onto this line segment.\r\n   * \r\n   * @param {Vector} p The vector to project onto the line segment.\r\n   * @returns {Vector} The orthogonal projection of p onto the line segment.\r\n   */\r\n  getOrthogonalProjection(p) {\r\n    // http://mathonline.wikidot.com/orthogonal-projections\r\n\r\n    const d1 = this.pt2.subtract(this.pt1); // Direction vector of the line segment\r\n    const d2 = p.subtract(this.pt1); // Vector from point p to the first point of the line segment\r\n\r\n    const l1 = d1.magnitude(); // Length of the line segment\r\n\r\n    const dotProduct = Math.min(Math.max(d2.dotProduct(d1.normalize()), 0), l1); // Constrain dot product between 0 and l1\r\n\r\n    return this.pt1.add(d1.multiply(dotProduct)); // Project p onto the line segment\r\n  }\r\n\r\n  /**\r\n   * Returns the minimum distance between this line segment and the given point p.\r\n   * \r\n   * @param {Vector} p The point to calculate the distance to.\r\n   * @returns {number} The minimum distance between the line segment and the point.\r\n   */\r\n  getDistance(p) {\r\n    const op = this.getOrthogonalProjection(p);\r\n    return p.subtract(op).magnitude();\r\n  }\r\n\r\n  /**\r\n   * Returns the magnitude of this vector as a floating point number.\r\n   * \r\n   * @returns {number} The magnitude of the line segment.\r\n   */\r\n  getMagnitude() {\r\n    return this.pt2.subtract(this.pt1).magnitude();\r\n  }\r\n\r\n  /**\r\n   * Sets the magnitude of the line segment to the given number.\r\n   * \r\n   * @param {number} len The desired magnitude of the line segment.\r\n   */\r\n  setMagnitude(len) {\r\n    const diffVector = this.pt2.subtract(this.pt1).normalize().multiply(len);\r\n    this.pt2 = this.pt1.add(diffVector);\r\n  }\r\n\r\n  /**\r\n   * Draws the line segment on the provided canvas context.\r\n   * \r\n   * @param {CanvasRenderingContext2D} ctx - The canvas rendering context to draw on.\r\n   */\r\n  draw(ctx) {\r\n    ctx.strokeStyle = this.strokeColor;\r\n    ctx.lineWidth = this.strokeWeight;\r\n  \r\n    if (this.isDashedLine) {\r\n      ctx.setLineDash([5, 15]);\r\n    }\r\n  \r\n    this.drawArrow(ctx, this.pt1, this.pt2.subtract(this.pt1), this.strokeColor); \r\n  \r\n    // Draw text labels (optional)\r\n    if (this.drawTextLabels) {\r\n      ctx.font = `${this.fontSize}px Arial`; // Replace with your desired font and size\r\n      ctx.textAlign = \"left\";\r\n      ctx.textBaseline = \"top\";\r\n      ctx.fillStyle = this.strokeColor; // Or any other desired color\r\n  \r\n      const label = this.generateLabel();\r\n      const labelWidth = ctx.measureText(label).width;\r\n      ctx.fillText(label, -labelWidth - 3, 12);\r\n    }\r\n  }\r\n\r\n  drawArrow(ctx, p1, p2, color) {\r\n    const headLength = 10; // Length of the arrow head\r\n    const angle = Math.atan2(p2.y, p2.x);\r\n\r\n    ctx.save();\r\n    ctx.strokeStyle = color;\r\n    ctx.fillStyle = color;\r\n\r\n    // Draw the line\r\n    ctx.beginPath();\r\n    ctx.moveTo(p1.x, p1.y);\r\n    ctx.lineTo(p1.x + p2.x, p1.y + p2.y);\r\n    ctx.stroke();\r\n\r\n    // Draw the arrow head\r\n    ctx.beginPath();\r\n    ctx.moveTo(p1.x + p2.x, p1.y + p2.y);\r\n    ctx.lineTo(p1.x + p2.x - headLength * Math.cos(angle - Math.PI / 6), p1.y + p2.y - headLength * Math.sin(angle - Math.PI / 6));\r\n    ctx.lineTo(p1.x + p2.x - headLength * Math.cos(angle + Math.PI / 6), p1.y + p2.y - headLength * Math.sin(angle + Math.PI / 6));\r\n    ctx.lineTo(p1.x + p2.x, p1.y + p2.y);\r\n    ctx.lineTo(p1.x + p2.x - headLength * Math.cos(angle - Math.PI / 6), p1.y + p2.y - headLength * Math.sin(angle - Math.PI / 6));\r\n    ctx.stroke();\r\n    ctx.fill();\r\n    ctx.restore();\r\n  }\r\n  \r\n  /**\r\n   * Generates the label to be displayed on the line segment.\r\n   *\r\n   * @returns {string} The label text.\r\n   */\r\n  generateLabel() {\r\n    let label = \"\";\r\n    if (this.drawTextAngle) {\r\n      const angleDegrees = Math.round(Math.atan2(this.pt2.y - this.pt1.y, this.pt2.x - this.pt1.x) * 180 / Math.PI);\r\n      label += `${angleDegrees}Â°`;\r\n    }\r\n  \r\n    if (this.drawTextAngle && this.drawTextMagnitude) {\r\n      label += \" \";\r\n    }\r\n  \r\n    if (this.drawTextMagnitude) {\r\n      label += `|${this.getMagnitude().toFixed(1)}|`;\r\n    }\r\n  \r\n    return label;\r\n  }\r\n\r\n  /**\r\n   * Draws positive and negative angle arcs between two line segments on a canvas context.\r\n   *\r\n   * @param {CanvasRenderingContext2D} ctx - The canvas rendering context.\r\n   * @param {Object} lineSegment1 - The first line segment.\r\n   * @param {Object} lineSegment2 - The second line segment.\r\n   * @param {string} clockwiseArcColor - The color of arc1\r\n   * @param {string} counterclockwiseArcColor - The color of arc2\r\n   * @param {number} [clockwiseArcRadius=50] - The size of the positive angle arc.\r\n   * @param {number} [counterclockwiseArcRadius=30] - The size of the negative angle arc.\r\n   */\r\n  static drawAngleArcs(ctx, lineSegment1, lineSegment2, clockwiseArcColor='blue', \r\n    counterclockwiseArcColor='red', clockwiseArcRadius = 50, counterclockwiseArcRadius = 30) {\r\n    \r\n    const lineSeg1AngleRadians = lineSegment1.getHeading();\r\n    const angles = lineSegment1.getAnglesBetween(lineSegment2);\r\n\r\n    console.log(`CW angle ${convertToDegrees(angles.clockwiseAngle).toFixed(1)} CCW angle ${convertToDegrees(angles.counterclockwiseAngle).toFixed(1)}`);\r\n    //console.log(`Counterclockwise Angle: ${angles.counterclockwiseAngle} radians (${convertToDegrees(angles.counterclockwiseAngle).toFixed(1)}Â°)`);\r\n    //console.log(`Clockwise Angle: ${angles.clockwiseAngle} radians (${convertToDegrees(angles.clockwiseAngle).toFixed(1)}Â°)`);\r\n    // console.log(`Old angle Between: ${angleBetweenLineSegmentsInRadians} radians (${convertToDegrees(angleBetweenLineSegmentsInRadians).toFixed(1)}Â°)`);\r\n    \r\n    ctx.save();\r\n\r\n    // Draw the clockwise arc\r\n    // arc(x, y, radius, startAngle, endAngle, counterclockwise)\r\n    ctx.beginPath();\r\n    ctx.arc(lineSegment1.pt1.x, lineSegment1.pt1.y, clockwiseArcRadius, \r\n      lineSeg1AngleRadians, lineSeg1AngleRadians + angles.clockwiseAngle, false);\r\n    ctx.strokeStyle = clockwiseArcColor;\r\n    //ctx.setLineDash([2, 5]);\r\n    ctx.stroke();\r\n\r\n    // Draw the clockwise angle text\r\n    const clockwiseArcMiddleVector = new Vector(\r\n      lineSegment1.pt1.x + clockwiseArcRadius * 1.35 * Math.cos(lineSeg1AngleRadians + angles.clockwiseAngle / 2),\r\n      lineSegment1.pt1.y + clockwiseArcRadius * 1.35 * Math.sin(lineSeg1AngleRadians + angles.clockwiseAngle / 2)\r\n    );\r\n  \r\n    ctx.font = \"12px Arial\"; // Replace with your desired font and size\r\n    ctx.textAlign = \"center\";\r\n    ctx.textBaseline = \"middle\";\r\n    ctx.fillStyle = clockwiseArcColor;\r\n  \r\n    const clockwiseAngleDegrees = convertToDegrees(angles.clockwiseAngle);\r\n    const clockwiseAngleDegreesLabel = `${clockwiseAngleDegrees.toFixed(1)}Â°`;\r\n    ctx.fillText(clockwiseAngleDegreesLabel, clockwiseArcMiddleVector.x, clockwiseArcMiddleVector.y);\r\n\r\n    // Draw the counterclockwise arc\r\n    ctx.beginPath();\r\n    ctx.arc(lineSegment1.pt1.x, lineSegment1.pt1.y, counterclockwiseArcRadius,\r\n      lineSeg1AngleRadians, lineSeg1AngleRadians - angles.counterclockwiseAngle, true);\r\n    ctx.strokeStyle = counterclockwiseArcColor;\r\n    ctx.stroke();\r\n\r\n    // Draw the counterclockwise angle text\r\n    const counterclockwiseArcMiddleVector = new Vector(\r\n      lineSegment1.pt1.x + counterclockwiseArcRadius * 1.5 * Math.cos(lineSeg1AngleRadians - angles.counterclockwiseAngle / 2),\r\n      lineSegment1.pt1.y + counterclockwiseArcRadius * 1.5 * Math.sin(lineSeg1AngleRadians - angles.counterclockwiseAngle / 2)\r\n    );\r\n\r\n    const counterclockwiseAngleDegrees = convertToDegrees(angles.counterclockwiseAngle);\r\n    const counterclockwiseAngleDegreesLabel = `${counterclockwiseAngleDegrees.toFixed(1)}Â°`;\r\n    ctx.fillStyle = counterclockwiseArcColor;\r\n    ctx.fillText(counterclockwiseAngleDegreesLabel, counterclockwiseArcMiddleVector.x, counterclockwiseArcMiddleVector.y);\r\n  \r\n    ctx.restore();\r\n  }\r\n}\r\n\r\n/**\r\n * Calculates the two normals for the line segment (one normal for each direction).\r\n * \r\n * @param {Vector} pt1 The first point in the line segment.\r\n * @param {Vector} pt2 The second point in the line segment.\r\n * @returns {Vector[]} An array containing two Vector objects representing the normals.\r\n */\r\nfunction calculateNormals(pt1, pt2) {\r\n  // From: https://stackoverflow.com/a/1243676  \r\n  // https://www.mathworks.com/matlabcentral/answers/85686-how-to-calculate-normal-to-a-line\r\n  //  V = B - A;\r\n  //  normal1 = [ V(2), -V(1)];\r\n  //  normal2 = [-V(2), V(1)];\r\n\r\n  const v = pt2.subtract(pt1);\r\n  return [new Vector(v.y, -v.x), new Vector(-v.y, v.x)];\r\n}","import { Vector } from './math/vector.js';\r\nimport { LineSegment } from './graphics/line-segment.js';\r\n\r\nexport class MakeabilityLabLogo {\r\n\r\n  constructor(x, y, triangleSize) {\r\n    this.makeLabLogoArray = MakeabilityLabLogo.createMakeabilityLabLogoCellArray(x, y, triangleSize);\r\n\r\n    this.visible = true;\r\n    this.isMOutlineVisible = true;\r\n    this.isLOutlineVisible = true;\r\n    this.mOutlineColor = 'black';\r\n    this.mOutlineStrokeWidth = 4;\r\n    this.lOutlineColor = 'black';\r\n    this.lOutlineStrokeWidth = 4;\r\n    this.setColors('white', 'black');\r\n    this.setFillColorsToDefault();\r\n\r\n    for(const tri of this.getMShadowTriangles()){\r\n      tri.fillColor = tri.strokeColor;\r\n    }\r\n\r\n    //this.setColorScheme(ColorScheme.BlackOnWhite);\r\n    this.areLTriangleStrokesVisible = false;\r\n  }\r\n\r\n  /**\r\n   * The logo has 6 cols and 4 rows\r\n   */\r\n  static get numRows() { return 4; }\r\n\r\n  /**\r\n   * The logo has 6 cols and 4 rows\r\n   */\r\n  static get numCols() { return 6; }\r\n\r\n  /**\r\n   * Calculates the width of the MakeabilityLabLogo based on the size of the triangles.\r\n   *\r\n   * @param {number} triangleSize - The size of each triangle.\r\n   * @returns {number} The total width of the MakeabilityLabLogo.\r\n   */\r\n  static getWidth(triangleSize){\r\n    return MakeabilityLabLogo.numCols * triangleSize;\r\n  }\r\n\r\n  /**\r\n   * Calculates the height of the MakeabilityLabLogo based on the size of the triangles.\r\n   *\r\n   * @param {number} triangleSize - The size of each triangle.\r\n   * @returns {number} The total height of the logo.\r\n   */\r\n  static getHeight(triangleSize){\r\n    return MakeabilityLabLogo.numRows * triangleSize;\r\n  }\r\n\r\n  /**\r\n   * Calculates the x-coordinate for centering the MakeabilityLabLogo on the canvas.\r\n   *\r\n   * @param {number} triangleSize - The size of each triangle.\r\n   * @param {number} canvasWidth - The width of the canvas.\r\n   * @returns {number} The x-coordinate for centering the logo.\r\n   */\r\n  static getXCenterPosition(triangleSize, canvasWidth){\r\n    const xCenter = (canvasWidth - MakeabilityLabLogo.getWidth(triangleSize)) / 2;\r\n    return Math.round(xCenter / triangleSize) * triangleSize;\r\n  }\r\n\r\n  /**\r\n   * Calculates the y-coordinate for centering the MakeabilityLabLogo on the canvas.\r\n   *\r\n   * @param {number} triangleSize - The size of each triangle.\r\n   * @param {number} canvasHeight - The width of the canvas.\r\n   * @returns {number} The y-coordinate for centering the logo.\r\n   */\r\n  static getYCenterPosition(triangleSize, canvasHeight){\r\n    const yCenter = (canvasHeight - MakeabilityLabLogo.getHeight(triangleSize)) / 2;\r\n    return Math.round(yCenter / triangleSize) * triangleSize;\r\n  }\r\n\r\n  /**\r\n   * Gets the far left x-coordinate of the Makeability Lab logo\r\n   * \r\n   * @returns {number} The x-coordinate of the first element.\r\n   */\r\n  get x(){ return this.makeLabLogoArray[0][0].x }\r\n\r\n  /**\r\n   * Gets the top y-coordinate of the Makeability Lab logo\r\n   * \r\n   * @returns {number} The y-coordinate of the first element.\r\n   */\r\n  get y(){ return this.makeLabLogoArray[0][0].y }\r\n\r\n  /**\r\n   * Gets the size of a cell in the Makeability Lab logo\r\n   * Each cell is composed of two triangles\r\n   * \r\n   * @returns {number} The size of the cell.\r\n   */\r\n  get cellSize(){ return this.makeLabLogoArray[0][0].size }\r\n\r\n  /**\r\n   * Gets the width of the Makeability Lab logo\r\n   *\r\n   * @returns {number} The width of the Makeability Lab logo.\r\n   */\r\n  get width(){ return MakeabilityLabLogo.numCols * this.makeLabLogoArray[0][0].size }\r\n\r\n  /**\r\n   * Gets the height of the MakeabilityLab logo.\r\n   * The height is calculated as the number of rows in the logo multiplied by the size of the first element in the logo array.\r\n   * \r\n   * @returns {number} The height of the MakeabilityLab logo.\r\n   */\r\n  get height(){ return MakeabilityLabLogo.numRows * this.makeLabLogoArray[0][0].size }\r\n\r\n  /**\r\n   * Getter for the default colors state.\r\n   * \r\n   * @returns {boolean} - Returns true if the default colors are on, otherwise false.\r\n   */\r\n  get areDefaultColorsOn(){ return this._defaultColorsOn; }\r\n\r\n  /**\r\n   * Sets the visibility of the strokes for the L outline in the Makeability Lab logo\r\n   * \r\n   * @param {boolean} visible - A boolean indicating whether the strokes should be visible.\r\n   */\r\n  set areLTriangleStrokesVisible(visible){ \r\n    for(const tri of this.getLTriangles()){\r\n      tri.isStrokeVisible = visible;\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Returns true of the L strokes are visible, otherwise false.\r\n   * \r\n   * @returns {boolean} True if all L-shaped triangle strokes are visible, otherwise false.\r\n   */\r\n  get areLTriangleStrokesVisible(){\r\n    let visible = true;\r\n    for(const tri of this.getLTriangles()){\r\n      visible &= tri.isStrokeVisible;\r\n    }\r\n    return visible;\r\n  }\r\n\r\n  /**\r\n   * Sets the stroke visibility for all triangles.\r\n   *\r\n   * @param {boolean} isTransparent - If true, the stroke will be made transparent (invisible).\r\n   * @param {boolean} [includeMShadowTriangles=true] - If true, includes M shadow triangles in the operation.\r\n   */\r\n  setStrokeTransparent(isTransparent, includeMShadowTriangles=true){\r\n    for (const tri of this.getAllTriangles(includeMShadowTriangles)) {\r\n      tri.isStrokeVisible = !isTransparent;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets the internal triangles to transparent\r\n   * @param {Boolean} isTransparent \r\n   * @param {Boolean} includeMShadowTriangles \r\n   */\r\n  setFillTransparent(isTransparent, includeMShadowTriangles=true){\r\n    for (const tri of this.getAllTriangles(includeMShadowTriangles)) {\r\n      tri.isFillVisible = !isTransparent;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convenience method to set fill and stroke colors\r\n   * @param {*} fillColor \r\n   * @param {*} strokeColor \r\n   */\r\n  setColors(fillColor, strokeColor){\r\n    for (let row = 0; row < this.makeLabLogoArray.length; row++) {\r\n      for (let col = 0; col < this.makeLabLogoArray[row].length; col++) {\r\n        this.makeLabLogoArray[row][col].tri1.fillColor = fillColor;\r\n        this.makeLabLogoArray[row][col].tri1.strokeColor = strokeColor;\r\n\r\n        this.makeLabLogoArray[row][col].tri2.fillColor = fillColor;\r\n        this.makeLabLogoArray[row][col].tri2.strokeColor = strokeColor;\r\n      }\r\n    }  \r\n\r\n    for(const tri of this.getMShadowTriangles()){\r\n      tri.fillColor = tri.strokeColor;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Retrieves all triangles from the Makeability Lab logo array.\r\n   * The M shadow triangles are the two dark triangles on the bottom left and right\r\n   * side of the logo\r\n   * \r\n   * @param {boolean} [includeMShadowTriangles=true] - Whether to include M shadow triangles in the result.\r\n   * @returns {Array} An array containing all the triangles from the Makeability Lab logo.\r\n   */\r\n  getAllTriangles(includeMShadowTriangles=true){\r\n    let allTriangles = new Array();\r\n    for (let row = 0; row < this.makeLabLogoArray.length; row++) {\r\n      for (let col = 0; col < this.makeLabLogoArray[row].length; col++) {\r\n        if(includeMShadowTriangles || !MakeabilityLabLogo.isMShadowTriangle(row, col, 1)){\r\n          allTriangles.push(this.makeLabLogoArray[row][col].tri1);\r\n        }\r\n\r\n        if(includeMShadowTriangles || !MakeabilityLabLogo.isMShadowTriangle(row, col, 2)){\r\n          allTriangles.push(this.makeLabLogoArray[row][col].tri2);\r\n        }\r\n      }\r\n    }  \r\n    return allTriangles;\r\n  }\r\n\r\n  /**\r\n   * Gets the triangles that are part of the M \"shadow\". That is, the \r\n   * black/darkened in the logo\r\n   *\r\n   * @returns {Array} An array containing the selected triangles.\r\n   */\r\n  getMShadowTriangles(){\r\n    let mShadowTriangles = new Array();\r\n    \r\n    // left side\r\n    mShadowTriangles.push(this.makeLabLogoArray[2][1].tri2);\r\n    mShadowTriangles.push(this.makeLabLogoArray[3][1].tri1);\r\n    \r\n    // right side\r\n    mShadowTriangles.push(this.makeLabLogoArray[2][4].tri2);\r\n    mShadowTriangles.push(this.makeLabLogoArray[3][4].tri1);\r\n\r\n    return mShadowTriangles;\r\n  }\r\n\r\n  /**\r\n   * Gets the triangles that compose the L in the Makeability Lab logo\r\n   *\r\n   * @returns {Array} An array containing the selected triangles.\r\n   */\r\n  getLTriangles(){\r\n    let lTriangles = new Array();\r\n    lTriangles.push(this.makeLabLogoArray[0][0].tri2);\r\n    lTriangles.push(this.makeLabLogoArray[0][1].tri2);\r\n    lTriangles.push(this.makeLabLogoArray[1][0].tri1);\r\n    lTriangles.push(this.makeLabLogoArray[1][1].tri1);\r\n    lTriangles.push(this.makeLabLogoArray[1][1].tri2);\r\n    lTriangles.push(this.makeLabLogoArray[1][2].tri2);\r\n    lTriangles.push(this.makeLabLogoArray[2][1].tri1);\r\n    lTriangles.push(this.makeLabLogoArray[2][2].tri1);\r\n    lTriangles.push(this.makeLabLogoArray[2][2].tri2);\r\n    lTriangles.push(this.makeLabLogoArray[3][2].tri1);\r\n    lTriangles.push(this.makeLabLogoArray[3][3].tri1);\r\n\r\n    lTriangles.push(this.makeLabLogoArray[2][3].tri1);\r\n    lTriangles.push(this.makeLabLogoArray[2][3].tri2);\r\n\r\n    lTriangles.push(this.makeLabLogoArray[1][3].tri2);\r\n    lTriangles.push(this.makeLabLogoArray[2][4].tri1);\r\n    lTriangles.push(this.makeLabLogoArray[1][4].tri2);\r\n    return lTriangles;\r\n  }\r\n\r\n  /**\r\n   * Gets the triangles that are colored in the ML logo by default\r\n   *\r\n   * @returns {Array} An array containing the default colored triangles.\r\n   */\r\n  getDefaultColoredTriangles(){\r\n    let cTriangles = new Array();\r\n    cTriangles.push(this.makeLabLogoArray[0][4].tri2);\r\n    cTriangles.push(this.makeLabLogoArray[0][5].tri2);\r\n    cTriangles.push(this.makeLabLogoArray[1][0].tri2);\r\n    cTriangles.push(this.makeLabLogoArray[1][4].tri1);\r\n    cTriangles.push(this.makeLabLogoArray[1][5].tri1);\r\n    cTriangles.push(this.makeLabLogoArray[1][5].tri2);\r\n    cTriangles.push(this.makeLabLogoArray[2][0].tri1);\r\n    cTriangles.push(this.makeLabLogoArray[2][0].tri2);\r\n    cTriangles.push(this.makeLabLogoArray[2][5].tri1);\r\n    cTriangles.push(this.makeLabLogoArray[2][5].tri2);\r\n    cTriangles.push(this.makeLabLogoArray[3][0].tri1);\r\n    cTriangles.push(this.makeLabLogoArray[3][5].tri1);\r\n    return cTriangles;\r\n  }\r\n\r\n  /**\r\n   * Sets the default colors for the logo.\r\n   */\r\n  setFillColorsToDefault(){\r\n    this.setDefaultColoredTrianglesFillColor(ORIGINAL_COLOR_ARRAY);\r\n  }\r\n\r\n  /**\r\n   * Sets the default fill color for the colored triangles.\r\n   * \r\n   * @param {(string|string[])} fillColorOrColorArray - A single color string or an \r\n   * array of color strings to set as the fill color(s) for the triangles.\r\n   */\r\n  setDefaultColoredTrianglesFillColor(fillColorOrColorArray){\r\n    const cTriangles = this.getDefaultColoredTriangles();\r\n    if(Array.isArray(fillColorOrColorArray)){\r\n      for(let i=0; i<cTriangles.length; i++){\r\n        cTriangles[i].fillColor = fillColorOrColorArray[i];\r\n      }\r\n    }else{\r\n      for(let i=0; i<cTriangles.length; i++){\r\n        cTriangles[i].fillColor = fillColorOrColorArray;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Draws the Makeability Lab logo and its outlines if they are visible.\r\n   * \r\n   * This method performs the following actions:\r\n   * 1. Checks if the logo is visible; if not, it returns immediately.\r\n   * 2. Iterates through the `makeLabLogoArray` and calls the `draw` method on each element.\r\n   * 3. If the M outline is visible, it draws the M outline using the specified color and stroke weight.\r\n   * 4. If the L outline is visible, it draws the L outline using the specified color and stroke weight.\r\n   */\r\n  draw(ctx) {\r\n    if(!this.visible){ return; }\r\n\r\n    for (let row = 0; row < this.makeLabLogoArray.length; row++) {\r\n      for (let col = 0; col < this.makeLabLogoArray[row].length; col++) {\r\n          this.makeLabLogoArray[row][col].draw(ctx);\r\n      }\r\n    }\r\n\r\n    if(this.isMOutlineVisible){\r\n      ctx.save();\r\n      ctx.strokeStyle = this.mOutlineColor;\r\n      ctx.lineWidth = this.mOutlineStrokeWidth;\r\n      ctx.beginPath();\r\n      let mPoints = this.getMOutlinePoints();\r\n      for (const [x, y] of mPoints) {\r\n        ctx.lineTo(x, y);\r\n      }\r\n      ctx.closePath();\r\n      ctx.stroke();\r\n      ctx.restore();\r\n    }\r\n\r\n    if(this.isLOutlineVisible){\r\n      ctx.save();\r\n      ctx.strokeStyle = this.lOutlineColor;\r\n      ctx.lineWidth = this.lOutlineStrokeWidth;\r\n      ctx.beginPath();\r\n      let lPoints = this.getLOutlinePoints();\r\n      for (const [x, y] of lPoints) {\r\n        ctx.lineTo(x, y);\r\n      }\r\n      ctx.closePath();\r\n      ctx.stroke();\r\n      ctx.restore();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @returns gets the L outline as an array of line segments\r\n   */\r\n  getLOutlineLineSegments(){\r\n    let lLineSegments = new Array();\r\n    \r\n    lLineSegments.push(new LineSegment(this.x + this.cellSize, this.y, \r\n      this.x + 3 * this.cellSize, this.y + 2 * this.cellSize));\r\n    lLineSegments.push(new LineSegment(this.x + 3 * this.cellSize, \r\n      this.y + 2 * this.cellSize, this.x + 4 * this.cellSize, this.y + this.cellSize));\r\n    lLineSegments.push(new LineSegment(this.x + 4 * this.cellSize, this.y + this.cellSize,\r\n      this.x + 5 * this.cellSize, this.y + 2 * this.cellSize));\r\n    lLineSegments.push(new LineSegment(this.x + 5 * this.cellSize, this.y + 2 * this.cellSize,\r\n      this.x + 3 * this.cellSize, this.y + 4 * this.cellSize));\r\n    lLineSegments.push(new LineSegment(this.x + 3 * this.cellSize, this.y + 4 * this.cellSize,\r\n      this.x, this.y + 1 * this.cellSize));\r\n    lLineSegments.push(new LineSegment(this.x, this.y + this.cellSize,\r\n      this.x + this.cellSize, this.y));\r\n\r\n    return lLineSegments;\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @returns Gets the L outline as an array of points (each point is [x, y])\r\n   */\r\n  getLOutlinePoints(){\r\n    let lPoints = new Array();\r\n\r\n    // Top part\r\n    lPoints.push([this.x, this.y + this.cellSize]);\r\n    lPoints.push([this.x + this.cellSize, this.y]);\r\n    lPoints.push([this.x + 2 * this.cellSize, this.y + this.cellSize]);\r\n    lPoints.push([this.x + 3 * this.cellSize, this.y + 2 * this.cellSize]);\r\n    lPoints.push([this.x + 4 * this.cellSize, this.y + this.cellSize]);\r\n\r\n    // Right side\r\n    lPoints.push([this.x + 5 * this.cellSize, this.y + 2 * this.cellSize]);\r\n    lPoints.push([this.x + 4 * this.cellSize, this.y + 3 * this.cellSize]);\r\n    lPoints.push([this.x + 3 * this.cellSize, this.y + 4 * this.cellSize]);\r\n\r\n    // Bottom part\r\n    lPoints.push([this.x + 2 * this.cellSize, this.y + 3 * this.cellSize]);\r\n    lPoints.push([this.x + 1 * this.cellSize, this.y + 2 * this.cellSize]);\r\n    lPoints.push([this.x + 0 * this.cellSize, this.y + 1 * this.cellSize]);\r\n\r\n    return lPoints\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @returns gets the M outline as an array of line segments\r\n   */\r\n   getMOutlineLineSegments(){\r\n    let mLineSegments = new Array();\r\n    \r\n    mLineSegments.push(new LineSegment(this.x + this.cellSize, this.y, \r\n      this.x + 3 * this.cellSize, this.y + 2 * this.cellSize));\r\n\r\n    mLineSegments.push(new LineSegment(this.x + 3 * this.cellSize, this.y + 2 * this.cellSize, \r\n      this.x + 5 * this.cellSize, this.y));\r\n\r\n    mLineSegments.push(new LineSegment(this.x + 5 * this.cellSize, this.y, \r\n      this.x + 6 * this.cellSize, this.y + this.cellSize));\r\n\r\n    mLineSegments.push(new LineSegment(this.x + 6 * this.cellSize, this.y + this.cellSize, \r\n      this.x + 6 * this.cellSize, this.y + 3 * this.cellSize));\r\n\r\n    mLineSegments.push(new LineSegment(this.x + 6 * this.cellSize, this.y + 3 * this.cellSize, \r\n      this.x + 5 * this.cellSize, this.y + 4 * this.cellSize));\r\n\r\n    mLineSegments.push(new LineSegment(this.x + 5 * this.cellSize, this.y + 4 * this.cellSize, \r\n      this.x + 4 * this.cellSize, this.y + 3 * this.cellSize));\r\n\r\n    mLineSegments.push(new LineSegment(this.x + 4 * this.cellSize, this.y + 3 * this.cellSize, \r\n      this.x + 3 * this.cellSize, this.y + 4 * this.cellSize));\r\n\r\n    mLineSegments.push(new LineSegment(this.x + 3 * this.cellSize, this.y + 4 * this.cellSize, \r\n      this.x + 2 * this.cellSize, this.y + 3 * this.cellSize));\r\n\r\n    mLineSegments.push(new LineSegment(this.x + 2 * this.cellSize, this.y + 3 * this.cellSize, \r\n      this.x + this.cellSize, this.y + 4 * this.cellSize));\r\n\r\n    mLineSegments.push(new LineSegment(this.x + this.cellSize, this.y + 4 * this.cellSize, \r\n      this.x, this.y + 3 * this.cellSize));\r\n\r\n    mLineSegments.push(new LineSegment(this.x, this.y + 3 * this.cellSize, \r\n      this.x, this.y + this.cellSize));\r\n\r\n    mLineSegments.push(new LineSegment(this.x, this.y + this.cellSize, \r\n      this.x + this.cellSize, this.y));\r\n\r\n    return mLineSegments;\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @returns Gets the M outline as an array of points (each point is [x, y])\r\n   */\r\n  getMOutlinePoints(){\r\n    let mPoints = new Array();\r\n\r\n    // Top part\r\n    mPoints.push([this.x, this.y + this.cellSize]);\r\n    mPoints.push([this.x + this.cellSize, this.y]);\r\n    mPoints.push([this.x + 2 * this.cellSize, this.y + this.cellSize]);\r\n    mPoints.push([this.x + 3 * this.cellSize, this.y + 2 * this.cellSize]);\r\n    mPoints.push([this.x + 4 * this.cellSize, this.y + this.cellSize]);\r\n    mPoints.push([this.x + 5 * this.cellSize, this.y]);\r\n    mPoints.push([this.x + 6 * this.cellSize, this.y + this.cellSize]);\r\n\r\n    // Right part\r\n    mPoints.push([this.x + 6 * this.cellSize, this.y + 2 * this.cellSize]);\r\n    mPoints.push([this.x + 6 * this.cellSize, this.y + 3 * this.cellSize]);\r\n    mPoints.push([this.x + 5 * this.cellSize, this.y + 4 * this.cellSize]);\r\n\r\n    // Bottom part\r\n    mPoints.push([this.x + 4 * this.cellSize, this.y + 3 * this.cellSize]);\r\n    mPoints.push([this.x + 3 * this.cellSize, this.y + 4 * this.cellSize]);\r\n    mPoints.push([this.x + 2 * this.cellSize, this.y + 3 * this.cellSize]);\r\n    mPoints.push([this.x + 1 * this.cellSize, this.y + 4 * this.cellSize]);\r\n    mPoints.push([this.x + 0 * this.cellSize, this.y + 3 * this.cellSize]);\r\n\r\n    // Left part\r\n    mPoints.push([this.x + 0 * this.cellSize, this.y + 2 * this.cellSize]);\r\n    mPoints.push([this.x + 0 * this.cellSize, this.y + 1 * this.cellSize]);\r\n   \r\n    return mPoints;\r\n  }\r\n\r\n  static setRandomColors(triangles, isFillVisible=true, isStrokeVisible=true){\r\n    for(const tri of triangles){\r\n      const fillColor = MakeabilityLabLogoColorer.getRandomOriginalColor();\r\n      tri.fillColor = fillColor;\r\n      tri.startFillColor = fillColor;\r\n      tri.endFillColor = fillColor;\r\n      tri.strokeColor = fillColor;\r\n      tri.isFillVisible = isFillVisible;\r\n      tri.isStrokeVisible = isStrokeVisible;\r\n    }\r\n  }\r\n\r\n  static setColors(triangles, fillColor, strokeColor, isFillVisible=true, isStrokeVisible=true){\r\n    for(const tri of triangles){\r\n      tri.fillColor = fillColor;\r\n      tri.startFillColor = fillColor;\r\n      tri.endFillColor = fillColor;\r\n      tri.strokeColor = strokeColor;\r\n      tri.isFillVisible = isFillVisible;\r\n      tri.isStrokeVisible = isStrokeVisible;\r\n    }\r\n  }\r\n\r\n  static createMakeabilityLabLogoCellArray(x, y, triangleSize) {\r\n    let mlLogo = new Array(MakeabilityLabLogo.numRows);\r\n\r\n    // Initialize the make lab logo grid\r\n    for (let row = 0; row < mlLogo.length; row++) {\r\n      mlLogo[row] = new Array(MakeabilityLabLogo.numCols);\r\n    }\r\n\r\n    mlLogo[0] = MakeabilityLabLogo.createMakeabilityLabTopRow(x, y, triangleSize);\r\n\r\n    y += triangleSize;\r\n    mlLogo[1] = MakeabilityLabLogo.createMakeabilityLab2ndRow(x, y, triangleSize);\r\n\r\n    y += triangleSize;\r\n    mlLogo[2] = MakeabilityLabLogo.createMakeabilityLab3rdRow(x, y, triangleSize);\r\n\r\n    y += triangleSize;\r\n    mlLogo[3] = MakeabilityLabLogo.createMakeabilityLabBottomRow(x, y, triangleSize);\r\n\r\n    return mlLogo;\r\n  }\r\n\r\n  static createMakeabilityLabTopRow(x, y, triangleSize) {\r\n    let topRow = new Array(MakeabilityLabLogo.numCols);\r\n    let col = 0;\r\n    topRow[col++] = Cell.createCellWithBottomTriangleOnly(x, y, triangleSize, TriangleDir.BottomRight);\r\n\r\n    x += triangleSize;\r\n    topRow[col++] = Cell.createCellWithBottomTriangleOnly(x, y, triangleSize, TriangleDir.BottomLeft);\r\n\r\n    x += triangleSize;\r\n    topRow[col++] = Cell.createEmptyCell(x, y, triangleSize, TriangleDir.TopLeft);\r\n\r\n    x += triangleSize;\r\n    topRow[col++] = Cell.createEmptyCell(x, y, triangleSize, TriangleDir.TopRight);\r\n\r\n    x += triangleSize;\r\n    topRow[col++] = Cell.createCellWithBottomTriangleOnly(x, y, triangleSize, TriangleDir.BottomRight);\r\n\r\n    x += triangleSize;\r\n    topRow[col++] = Cell.createCellWithBottomTriangleOnly(x, y, triangleSize, TriangleDir.BottomLeft);\r\n\r\n    return topRow;\r\n  }\r\n\r\n  static createMakeabilityLab2ndRow(x, y, triangleSize) {\r\n    let row2 = new Array(MakeabilityLabLogo.numCols);\r\n    let col = 0;\r\n    row2[col++] = Cell.createCell(x, y, triangleSize, TriangleDir.TopRight, TriangleDir.BottomLeft);\r\n\r\n    x += triangleSize;\r\n    row2[col++] = Cell.createCell(x, y, triangleSize, TriangleDir.TopLeft, TriangleDir.BottomRight);\r\n\r\n    x += triangleSize;\r\n    row2[col++] = Cell.createCellWithBottomTriangleOnly(x, y, triangleSize, TriangleDir.BottomLeft);\r\n\r\n    x += triangleSize;\r\n    row2[col++] = Cell.createCellWithBottomTriangleOnly(x, y, triangleSize, TriangleDir.BottomRight);\r\n\r\n    x += triangleSize;\r\n    row2[col++] = Cell.createCell(x, y, triangleSize, TriangleDir.TopRight, TriangleDir.BottomLeft);\r\n\r\n    x += triangleSize;\r\n    row2[col++] = Cell.createCell(x, y, triangleSize, TriangleDir.TopLeft, TriangleDir.BottomRight);\r\n\r\n    return row2;\r\n  }\r\n\r\n  static createMakeabilityLab3rdRow(x, y, triangleSize) {\r\n    let row3 = new Array(MakeabilityLabLogo.numCols);\r\n    for (let col = 0; col < row3.length; col++) {\r\n      let triDir = TriangleDir.TopLeft;\r\n      if (col % 2 != 0) {\r\n        triDir = TriangleDir.TopRight;\r\n      }\r\n      row3[col] = Cell.createCell(x, y, triangleSize, triDir);\r\n      x += triangleSize;\r\n    }\r\n    return row3;\r\n  }\r\n\r\n  static createMakeabilityLabBottomRow(x, y, triangleSize) {\r\n    let botRow = new Array(MakeabilityLabLogo.numCols);\r\n    for (let col = 0; col < botRow.length; col++) {\r\n      let triDir = TriangleDir.TopRight;\r\n      if (col % 2 != 0) {\r\n        triDir = TriangleDir.TopLeft;\r\n      }\r\n      botRow[col] = Cell.createCellWithTopTriangleOnly(x, y, triangleSize, triDir);\r\n      x += triangleSize;\r\n    }\r\n    return botRow;\r\n  }\r\n\r\n  static isMShadowTriangle(row, col, triNum){\r\n    return (row == 2 && col == 1 && triNum == 2) ||\r\n          (row == 3 && col == 1 && triNum == 1) ||\r\n          (row == 2 && col == 4 && triNum == 2) ||\r\n          (row == 3 && col == 4 && triNum == 1);\r\n  }\r\n}\r\n\r\nexport const TriangleDir = {\r\n  TopLeft: 'TopLeft',\r\n  TopRight: 'TopRight',\r\n  BottomLeft: 'BottomLeft',\r\n  BottomRight: 'BottomRight'\r\n};\r\n\r\nexport class Cell {\r\n  /**\r\n   * Creates an instance of the class with two triangles.\r\n   * @constructor\r\n   * @param {Object} triangle1 - The first triangle object.\r\n   * @param {Object} triangle2 - The second triangle object.\r\n   */\r\n  constructor(triangle1, triangle2) {\r\n    this.tri1 = triangle1;\r\n    this.tri2 = triangle2;\r\n  }\r\n\r\n  /**\r\n   * Gets the x-coordinate of the cell\r\n   * @returns {number} The x-coordinate of the cell.\r\n   */\r\n  get x() {\r\n    return this.tri1.x;\r\n  }\r\n\r\n  /**\r\n   * Gets the y-coordinate of the cell\r\n   * @returns {number} The y-coordinate of the cell.\r\n   */\r\n  get y() {\r\n    return this.tri1.y;\r\n  }\r\n\r\n  /**\r\n   * Gets the size of the cell. Cells are always square.\r\n   * @type {number}\r\n   */\r\n  get size() {\r\n    return this.tri1.size;\r\n  }\r\n\r\n\r\n  /**\r\n   * Sets the fill and stroke colors for the cell.\r\n   *\r\n   * @param {string} fillColor - The color to be used for filling.\r\n   * @param {string} [strokeColor] - The color to be used for the stroke. \r\n   *    If not provided, the fillColor will be used as the stroke color.\r\n   */\r\n  setColors(fillColor, strokeColor){\r\n    this.setFillColor(fillColor);\r\n\r\n    if(strokeColor){\r\n      this.setStrokeColor(strokeColor);\r\n    }else{\r\n      this.setStrokeColor(fillColor);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets the fill color for the cell.\r\n   * \r\n   * @param {string} fillColor - The fill color\r\n   */\r\n  setFillColor(fillColor){\r\n    this.tri1.fillColor = fillColor;\r\n    this.tri2.fillColor = fillColor;\r\n  }\r\n\r\n  /**\r\n   * Sets the stroke color for the cell.\r\n   * \r\n   * @param {string} strokeColor - The stroke color\r\n   */\r\n  setStrokeColor(strokeColor){\r\n    this.tri1.strokeColor = strokeColor;\r\n    this.tri2.strokeColor = strokeColor;\r\n  }\r\n\r\n  /**\r\n   * Sets the visibility of the cell\r\n   *\r\n   * @param {boolean} isVisible - A boolean indicating whether the cell is visible\r\n   */\r\n  setVisibility(isVisible){\r\n    this.tri1.visible = isVisible;\r\n    this.tri2.visible = isVisible;\r\n  }\r\n\r\n  /**\r\n   * Draws the cells on the canvas\r\n   *\r\n   * @param {CanvasRenderingContext2D} ctx - The canvas rendering context to draw on.\r\n   */\r\n  draw(ctx) {\r\n    if (this.tri1.visible) {\r\n      this.tri1.draw(ctx);\r\n    }\r\n\r\n    if (this.tri2.visible) {\r\n      this.tri2.draw(ctx);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates an empty cell with two invisible triangles.\r\n   *\r\n   * @param {number} x - The x-coordinate of the cell.\r\n   * @param {number} y - The y-coordinate of the cell.\r\n   * @param {number} size - The size of the triangles.\r\n   * @param {TriangleDir} [topTriangleDir=TriangleDir.TopLeft] - The direction of the top triangle.\r\n   * @returns {Cell} A new cell containing two invisible triangles.\r\n   */\r\n  static createEmptyCell(x, y, size, topTriangleDir=TriangleDir.TopLeft) {\r\n    let tri1 = new Triangle(x, y, size, topTriangleDir);\r\n    let tri2 = new Triangle(x, y, size, Triangle.getOppositeDirection(topTriangleDir));\r\n    tri1.visible = false;\r\n    tri2.visible = false;\r\n    return new Cell(tri1, tri2);\r\n  }\r\n\r\n  /**\r\n   * Creates a cell with only the top triangle visible.\r\n   *\r\n   * @param {number} x - The x-coordinate of the cell.\r\n   * @param {number} y - The y-coordinate of the cell.\r\n   * @param {number} size - The size of the triangles.\r\n   * @param {string} topTriangleDir - The direction of the top triangle. See TriangleDir for possible values.\r\n   * @returns {Cell} A cell object with the top triangle visible and the bottom triangle hidden.\r\n   */\r\n  static createCellWithTopTriangleOnly(x, y, size, topTriangleDir) {\r\n    let tri1 = new Triangle(x, y, size, topTriangleDir);\r\n    let tri2 = new Triangle(x, y, size, Triangle.getOppositeDirection(topTriangleDir));\r\n    tri2.visible = false;\r\n    return new Cell(tri1, tri2);\r\n  }\r\n\r\n  /**\r\n   * Creates a cell with only the bottom triangle visible.\r\n   *\r\n   * @param {number} x - The x-coordinate of the cell.\r\n   * @param {number} y - The y-coordinate of the cell.\r\n   * @param {number} size - The size of the triangles.\r\n   * @param {string} botTriangleDir - The direction of the bottom triangle. See TriangleDir for possible values.\r\n   * @returns {Cell} A new cell with the specified bottom triangle.\r\n   */\r\n  static createCellWithBottomTriangleOnly(x, y, size, botTriangleDir) {\r\n    let tri1 = new Triangle(x, y, size, Triangle.getOppositeDirection(botTriangleDir));\r\n    let tri2 = new Triangle(x, y, size, botTriangleDir);\r\n    tri1.visible = false;\r\n    return new Cell(tri1, tri2);\r\n  }\r\n\r\n  /**\r\n   * Creates a cell composed of two triangles.\r\n   *\r\n   * @param {number} x - The x-coordinate of the cell.\r\n   * @param {number} y - The y-coordinate of the cell.\r\n   * @param {number} size - The size of the triangles.\r\n   * @param {string} triangle1Dir - The direction of the first triangle. See TriangleDir for possible values.\r\n   * @param {string} [triangle2Dir] - The direction of the second triangle. If not provided, it will be the opposite of the first triangle's direction.\r\n   * @returns {Cell} A new cell composed of two triangles.\r\n   */\r\n  static createCell(x, y, size, triangle1Dir, triangle2Dir) {\r\n    let tri1 = new Triangle(x, y, size, triangle1Dir);\r\n\r\n    if (!triangle2Dir) {\r\n      triangle2Dir = Triangle.getOppositeDirection(triangle1Dir);\r\n    }\r\n    let tri2 = new Triangle(x, y, size, triangle2Dir);\r\n    return new Cell(tri1, tri2);\r\n  }\r\n}\r\n\r\nexport class Triangle {\r\n  /**\r\n   * Creates an instance of the triangle.\r\n   * \r\n   * @constructor\r\n   * @param {number} x - The x-coordinate of the triangle.\r\n   * @param {number} y - The y-coordinate of the triangle.\r\n   * @param {number} size - The size of the triangle.\r\n   * @param {string} direction - The direction of the triangle. See TriangleDir for possible values.\r\n   * @param {p5.Color} [fillColor='white'] - The fill color of the triangle.\r\n   * @param {p5.Color} [strokeColor='black'] - The stroke color of the triangle.\r\n   * @param {number} [strokeWeight=1] - The stroke weight of the triangle.\r\n   * @param {boolean} [visible=true] - The visibility of the triangle.\r\n   */\r\n  constructor(x, y, size, direction, fillColor = 'white',\r\n    strokeColor = 'black', strokeWeight = 1, visible = true) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.size = size;\r\n    this.direction = direction;\r\n    this.angle = 0;\r\n\r\n    this.strokeColor = strokeColor;\r\n    this.fillColor = fillColor;\r\n    this.strokeWeight = strokeWeight;\r\n    this.visible = visible;\r\n\r\n    this.isFillVisible = true;\r\n    this.isStrokeVisible = true;\r\n\r\n    this.drawCellOutline = false; // for debugging\r\n  }\r\n\r\n  /**\r\n   * Sets the fill and stroke colors for the triangle.\r\n   *\r\n   * @param {string} fillColor - The color to be used for filling.\r\n   * @param {string} [strokeColor] - The color to be used for the stroke. If not provided, the fillColor will be used as the stroke color.\r\n   */\r\n  setColors(fillColor, strokeColor){\r\n    this.fillColor = fillColor;\r\n\r\n    if(strokeColor){\r\n      this.strokeColor = strokeColor;\r\n    }else{\r\n      this.strokeColor = fillColor;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Draws a triangle on the given canvas context based on the object's properties.\r\n   *\r\n   * @param {CanvasRenderingContext2D} ctx - The canvas rendering context to draw on.\r\n   */\r\n  draw(ctx) {\r\n    if (!this.visible) return;\r\n\r\n    ctx.save();\r\n\r\n    if (this.isFillVisible) {\r\n      ctx.fillStyle = this.fillColor;\r\n    } else {\r\n      ctx.fillStyle = 'rgba(0, 0, 0, 0)';\r\n    }\r\n\r\n    if (this.isStrokeVisible) {\r\n      ctx.strokeStyle = this.strokeColor;\r\n      ctx.lineWidth = this.strokeWeight;\r\n    } else {\r\n      ctx.strokeStyle = 'rgba(0, 0, 0, 0)';\r\n    }\r\n\r\n    ctx.translate(this.x, this.y);\r\n    ctx.rotate(this.angle * Math.PI / 180);\r\n\r\n    ctx.beginPath();\r\n    switch (this.direction) {\r\n      case TriangleDir.BottomLeft:\r\n        ctx.moveTo(0, 0);\r\n        ctx.lineTo(0, this.size);\r\n        ctx.lineTo(this.size, this.size);\r\n        break;\r\n      case TriangleDir.BottomRight:\r\n        ctx.moveTo(0, this.size);\r\n        ctx.lineTo(this.size, this.size);\r\n        ctx.lineTo(this.size, 0);\r\n        break;\r\n      case TriangleDir.TopRight:\r\n        ctx.moveTo(0, 0);\r\n        ctx.lineTo(this.size, 0);\r\n        ctx.lineTo(this.size, this.size);\r\n        break;\r\n      case TriangleDir.TopLeft:\r\n      default:\r\n        ctx.moveTo(0, this.size);\r\n        ctx.lineTo(0, 0);\r\n        ctx.lineTo(this.size, 0);\r\n        break;\r\n    }\r\n    ctx.closePath();\r\n\r\n    if (this.isFillVisible) {\r\n      ctx.fill();\r\n    }\r\n    if (this.isStrokeVisible) {\r\n      ctx.stroke();\r\n    }\r\n\r\n    // useful for debugging\r\n    if (this.drawCellOutline) {\r\n      ctx.strokeStyle = 'rgba(128, 128, 128, 0.5)';\r\n      ctx.strokeRect(0, 0, this.size, this.size);\r\n    }\r\n\r\n    ctx.restore();\r\n  }\r\n\r\n  /**\r\n   * Returns the opposite direction of the given triangle direction.\r\n   *\r\n   * @param {TriangleDir} triangleDir - The current direction of the triangle.\r\n   * @returns {TriangleDir} - The opposite direction of the given triangle direction.\r\n   */\r\n  static getOppositeDirection(triangleDir) {\r\n    switch (triangleDir) {\r\n      case TriangleDir.BottomLeft:\r\n        return TriangleDir.TopRight;\r\n      case TriangleDir.BottomRight:\r\n        return TriangleDir.TopLeft;\r\n      case TriangleDir.TopRight:\r\n        return TriangleDir.BottomLeft;\r\n      case TriangleDir.TopLeft:\r\n      default:\r\n        return TriangleDir.BottomRight;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates a new Triangle object with the specified properties.\r\n   *\r\n   * @param {Object} tri - An object containing the properties of the triangle.\r\n   * @param {number} tri.x - The x-coordinate of the triangle.\r\n   * @param {number} tri.y - The y-coordinate of the triangle.\r\n   * @param {number} tri.size - The size of the triangle.\r\n   * @param {string} tri.direction - The direction of the triangle.\r\n   * @param {string} tri.fillColor - The fill color of the triangle.\r\n   * @param {string} tri.strokeColor - The stroke color of the triangle.\r\n   * @param {number} tri.strokeWeight - The stroke weight of the triangle.\r\n   * @param {boolean} tri.visible - The visibility of the triangle.\r\n   * @returns {Triangle} A new Triangle object.\r\n   */\r\n  static createTriangle(tri){\r\n    return new Triangle(tri.x, tri.y, tri.size, tri.direction,\r\n      tri.fillColor, tri.strokeColor, tri.strokeWeight, tri.visible);\r\n  }\r\n}\r\n\r\nexport class Grid{\r\n  /**\r\n   * Constructs a new instance of the class.\r\n   * \r\n   * @constructor\r\n   * @param {number} gridWidth - The width of the grid.\r\n   * @param {number} gridHeight - The height of the grid.\r\n   * @param {number} triangleSize - The size of each triangle in the grid.\r\n   * @param {string} [strokeColor='rgba(100, 100, 100, 0.5)'] - The color of the stroke for the grid lines.\r\n   * @param {string|null} [fillColor=null] - The fill color for the grid triangles.\r\n   */\r\n  constructor(gridWidth, gridHeight, triangleSize, strokeColor = 'rgba(200, 200, 200, 0.5)', fillColor = null){\r\n    this.gridArray = Grid.createGrid(gridWidth, gridHeight, triangleSize, strokeColor, fillColor);\r\n    this.visible = true;\r\n    this.setFillColor(fillColor);\r\n  }\r\n\r\n  /**\r\n   * Draws the grid onto the provided canvas context.\r\n   *\r\n   * @param {CanvasRenderingContext2D} ctx - The canvas rendering context to draw on.\r\n   */\r\n  draw(ctx){\r\n    if(!this.visible){ return; }\r\n\r\n    for(let row = 0; row < this.gridArray.length; row++){\r\n      for(let col = 0; col < this.gridArray[row].length; col++){\r\n        this.gridArray[row][col].draw(ctx);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets the stroke color for all triangles in the grid array.\r\n   *\r\n   * @param {string} strokeColor - The color to set as the stroke color for the triangles.\r\n   */\r\n  setStrokeColor(strokeColor){\r\n    for(let row = 0; row < this.gridArray.length; row++){\r\n      for(let col = 0; col < this.gridArray[row].length; col++){\r\n        this.gridArray[row][col].tri1.strokeColor = strokeColor;\r\n        this.gridArray[row][col].tri2.strokeColor = strokeColor;\r\n      }\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Sets the fill color for all triangles in the grid array.\r\n   *\r\n   * @param {string} fillColor - The color to set as the fill color for the triangles.\r\n   */\r\n  setFillColor(fillColor){\r\n    for(let row = 0; row < this.gridArray.length; row++){\r\n      for(let col = 0; col < this.gridArray[row].length; col++){\r\n        this.gridArray[row][col].tri1.fillColor = fillColor;\r\n        this.gridArray[row][col].tri2.fillColor = fillColor;\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Creates a grid of cells with triangles.\r\n   *\r\n   * @param {number} gridWidth - The width of the grid.\r\n   * @param {number} gridHeight - The height of the grid.\r\n   * @param {number} triangleSize - The size of each triangle in the grid.\r\n   * @param {string} strokeColor - The color of the triangle strokes.\r\n   * @param {string} [fillColor] - The optional fill color of the triangles.\r\n   * @returns {Array<Array<Cell>>} A 2D array representing the grid of cells.\r\n   */\r\n  static createGrid(gridWidth, gridHeight, triangleSize, strokeColor, fillColor){\r\n\r\n    const numGridColumns = Math.floor(gridWidth / triangleSize);\r\n    const numGridRows = Math.floor(gridHeight / triangleSize);\r\n  \r\n    let grid = new Array(numGridRows);\r\n  \r\n    for(let row = 0; row < grid.length; row++){\r\n      grid[row] = new Array(numGridColumns);\r\n      for(let col = 0; col < grid[row].length; col++){\r\n        let triDir = TriangleDir.TopLeft;\r\n        if((row % 2 == 0 && col % 2 == 0) || (row % 2 != 0 && col % 2 != 0)){\r\n          triDir = TriangleDir.TopRight;\r\n        }\r\n        let cell = Cell.createCell(col * triangleSize, row * triangleSize, triangleSize, triDir);\r\n  \r\n        cell.tri1.strokeColor = strokeColor;\r\n        cell.tri2.strokeColor = strokeColor;\r\n\r\n        if(fillColor){\r\n          cell.tri1.fillColor = fillColor;\r\n          cell.tri2.fillColor = fillColor;\r\n        }\r\n\r\n        grid[row][col] = cell;\r\n      }\r\n    }\r\n    return grid;\r\n  }\r\n}\r\n\r\nexport const OriginalColorPaletteRGB = {\r\n  Blue: \"rgb(135, 202, 228)\",\r\n  BlueGray: \"rgb(147, 169, 207)\",\r\n  Purple: \"rgb(171, 147, 197)\",\r\n  Green: \"rgb(148, 206, 146)\",\r\n  Orange: \"rgb(235, 185, 130)\",\r\n  RedPurple: \"rgb(207, 145, 166)\",\r\n  Pink: \"rgb(237, 162, 163)\",\r\n  YellowGreen: \"rgb(239, 226, 127)\",\r\n  LightGreen: \"rgb(209, 226, 133)\",\r\n  BlueGreen: \"rgb(147, 211, 202)\"\r\n};\r\n\r\nexport const ORIGINAL_COLOR_ARRAY = [\r\n  OriginalColorPaletteRGB.Blue, \r\n  OriginalColorPaletteRGB.BlueGray,\r\n  OriginalColorPaletteRGB.YellowGreen,\r\n  OriginalColorPaletteRGB.Purple,\r\n  OriginalColorPaletteRGB.Green,\r\n  OriginalColorPaletteRGB.Orange,\r\n  OriginalColorPaletteRGB.YellowGreen,\r\n  OriginalColorPaletteRGB.LightGreen,\r\n  OriginalColorPaletteRGB.Orange,\r\n  OriginalColorPaletteRGB.RedPurple,\r\n  OriginalColorPaletteRGB.BlueGreen,\r\n  OriginalColorPaletteRGB.Pink\r\n];\r\n\r\n\r\n/**\r\n * Class representing a colorer for the Makeability Lab logo.\r\n */\r\nexport class MakeabilityLabLogoColorer {\r\n\r\n  /**\r\n   * Gets a random color from the original color palette.\r\n   * @returns {string} A random color in RGB format from the original color palette.\r\n   */\r\n  static getRandomOriginalColor(){\r\n    return MakeabilityLabLogoColorer.getRandomColorFromPalette(OriginalColorPaletteRGB);\r\n  }\r\n\r\n  /**\r\n   * Gets a random color from the specified color palette.\r\n   * If no palette is provided, it defaults to the original color palette.\r\n   * @param {Object} [palette] - An optional color palette object where keys are color names and values are RGB strings.\r\n   * @returns {string} A random color in RGB format from the specified or default color palette.\r\n   */\r\n  static getRandomColorFromPalette(palette){\r\n    if(!palette){\r\n      palette = OriginalColorPaletteRGB;\r\n    }\r\n\r\n    const keys = Object.keys(palette);\r\n    const randKey = keys[Math.floor(Math.random() * keys.length)];\r\n    return palette[randKey];\r\n  }\r\n}"],"names":[],"mappings":"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AC,CAAC,CAAC,IAAI,CAAC,CAAC;AACtD,IAAI,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;AACtD,IAAI,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;AACtD,IAAI,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;AACtD,IAAI,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;AACtD,IAAI,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;AACtD,IAAI,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;AACtD,IAAI,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;AACtD,IAAI,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;AACtD,IAAI,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;AACtD,IAAI,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;AACtD;AACA,IAAI,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;AACtD,IAAI,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;AACtD;AACA,IAAI,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;AACtD,IAAI,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;AACtD,IAAI,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;AACtD,IAAI,OAAO,UAAU,CAAC;AACtB,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,0BAA0B,EAAE;AAC9B,IAAI,IAAI,UAAU,GAAG,IAAI,KAAK,EAAE,CAAC;AACjC,IAAI,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;AACtD,IAAI,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;AACtD,IAAI,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;AACtD,IAAI,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;AACtD,IAAI,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;AACtD,IAAI,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;AACtD,IAAI,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;AACtD,IAAI,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;AACtD,IAAI,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;AACtD,IAAI,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;AACtD,IAAI,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;AACtD,IAAI,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;AACtD,IAAI,OAAO,UAAU,CAAC;AACtB,GAAG;AACH;AACA;AACA;AACA;AACA,EAAE,sBAAsB,EAAE;AAC1B,IAAI,IAAI,CAAC,mCAAmC,CAAC,oBAAoB,CAAC,CAAC;AACnE,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,mCAAmC,CAAC,qBAAqB,CAAC;AAC5D,IAAI,MAAM,UAAU,GAAG,IAAI,CAAC,0BAA0B,EAAE,CAAC;AACzD,IAAI,GAAG,KAAK,CAAC,OAAO,CAAC,qBAAqB,CAAC,CAAC;AAC5C,MAAM,IAAI,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,EAAE,CAAC;AAC5C,QAAQ,UAAU,CAAC,CAAC,CAAC,CAAC,SAAS,GAAG,qBAAqB,CAAC,CAAC,CAAC,CAAC;AAC3D,OAAO;AACP,KAAK,KAAI;AACT,MAAM,IAAI,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,EAAE,CAAC;AAC5C,QAAQ,UAAU,CAAC,CAAC,CAAC,CAAC,SAAS,GAAG,qBAAqB,CAAC;AACxD,OAAO;AACP,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,IAAI,CAAC,GAAG,EAAE;AACZ,IAAI,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,OAAO,EAAE;AAChC;AACA,IAAI,KAAK,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,GAAG,EAAE,EAAE;AACjE,MAAM,KAAK,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,GAAG,EAAE,EAAE;AACxE,UAAU,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AACpD,OAAO;AACP,KAAK;AACL;AACA,IAAI,GAAG,IAAI,CAAC,iBAAiB,CAAC;AAC9B,MAAM,GAAG,CAAC,IAAI,EAAE,CAAC;AACjB,MAAM,GAAG,CAAC,WAAW,GAAG,IAAI,CAAC,aAAa,CAAC;AAC3C,MAAM,GAAG,CAAC,SAAS,GAAG,IAAI,CAAC,mBAAmB,CAAC;AAC/C,MAAM,GAAG,CAAC,SAAS,EAAE,CAAC;AACtB,MAAM,IAAI,OAAO,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC;AAC7C,MAAM,KAAK,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,OAAO,EAAE;AACpC,QAAQ,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AACzB,OAAO;AACP,MAAM,GAAG,CAAC,SAAS,EAAE,CAAC;AACtB,MAAM,GAAG,CAAC,MAAM,EAAE,CAAC;AACnB,MAAM,GAAG,CAAC,OAAO,EAAE,CAAC;AACpB,KAAK;AACL;AACA,IAAI,GAAG,IAAI,CAAC,iBAAiB,CAAC;AAC9B,MAAM,GAAG,CAAC,IAAI,EAAE,CAAC;AACjB,MAAM,GAAG,CAAC,WAAW,GAAG,IAAI,CAAC,aAAa,CAAC;AAC3C,MAAM,GAAG,CAAC,SAAS,GAAG,IAAI,CAAC,mBAAmB,CAAC;AAC/C,MAAM,GAAG,CAAC,SAAS,EAAE,CAAC;AACtB,MAAM,IAAI,OAAO,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC;AAC7C,MAAM,KAAK,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,OAAO,EAAE;AACpC,QAAQ,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AACzB,OAAO;AACP,MAAM,GAAG,CAAC,SAAS,EAAE,CAAC;AACtB,MAAM,GAAG,CAAC,MAAM,EAAE,CAAC;AACnB,MAAM,GAAG,CAAC,OAAO,EAAE,CAAC;AACpB,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,EAAE,uBAAuB,EAAE;AAC3B,IAAI,IAAI,aAAa,GAAG,IAAI,KAAK,EAAE,CAAC;AACpC;AACA,IAAI,aAAa,CAAC,IAAI,CAAC,IAAI,WAAW,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;AACrE,MAAM,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;AAC/D,IAAI,aAAa,CAAC,IAAI,CAAC,IAAI,WAAW,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ;AACjE,MAAM,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;AACvF,IAAI,aAAa,CAAC,IAAI,CAAC,IAAI,WAAW,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ;AACzF,MAAM,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;AAC/D,IAAI,aAAa,CAAC,IAAI,CAAC,IAAI,WAAW,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ;AAC7F,MAAM,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;AAC/D,IAAI,aAAa,CAAC,IAAI,CAAC,IAAI,WAAW,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ;AAC7F,MAAM,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;AAC3C,IAAI,aAAa,CAAC,IAAI,CAAC,IAAI,WAAW,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ;AACrE,MAAM,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;AACvC;AACA,IAAI,OAAO,aAAa,CAAC;AACzB,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,EAAE,iBAAiB,EAAE;AACrB,IAAI,IAAI,OAAO,GAAG,IAAI,KAAK,EAAE,CAAC;AAC9B;AACA;AACA,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;AACnD,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;AACnD,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;AACvE,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;AAC3E,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;AACvE;AACA;AACA,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;AAC3E,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;AAC3E,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;AAC3E;AACA;AACA,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;AAC3E,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;AAC3E,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;AAC3E;AACA,IAAI,OAAO,OAAO;AAClB,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG,uBAAuB,EAAE;AAC5B,IAAI,IAAI,aAAa,GAAG,IAAI,KAAK,EAAE,CAAC;AACpC;AACA,IAAI,aAAa,CAAC,IAAI,CAAC,IAAI,WAAW,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;AACrE,MAAM,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;AAC/D;AACA,IAAI,aAAa,CAAC,IAAI,CAAC,IAAI,WAAW,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ;AAC7F,MAAM,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3C;AACA,IAAI,aAAa,CAAC,IAAI,CAAC,IAAI,WAAW,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;AACzE,MAAM,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;AAC3D;AACA,IAAI,aAAa,CAAC,IAAI,CAAC,IAAI,WAAW,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ;AACzF,MAAM,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;AAC/D;AACA,IAAI,aAAa,CAAC,IAAI,CAAC,IAAI,WAAW,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ;AAC7F,MAAM,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;AAC/D;AACA,IAAI,aAAa,CAAC,IAAI,CAAC,IAAI,WAAW,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ;AAC7F,MAAM,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;AAC/D;AACA,IAAI,aAAa,CAAC,IAAI,CAAC,IAAI,WAAW,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ;AAC7F,MAAM,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;AAC/D;AACA,IAAI,aAAa,CAAC,IAAI,CAAC,IAAI,WAAW,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ;AAC7F,MAAM,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;AAC/D;AACA,IAAI,aAAa,CAAC,IAAI,CAAC,IAAI,WAAW,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ;AAC7F,MAAM,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;AAC3D;AACA,IAAI,aAAa,CAAC,IAAI,CAAC,IAAI,WAAW,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ;AACzF,MAAM,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;AAC3C;AACA,IAAI,aAAa,CAAC,IAAI,CAAC,IAAI,WAAW,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ;AACzE,MAAM,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;AACvC;AACA,IAAI,aAAa,CAAC,IAAI,CAAC,IAAI,WAAW,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ;AACrE,MAAM,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;AACvC;AACA,IAAI,OAAO,aAAa,CAAC;AACzB,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,EAAE,iBAAiB,EAAE;AACrB,IAAI,IAAI,OAAO,GAAG,IAAI,KAAK,EAAE,CAAC;AAC9B;AACA;AACA,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;AACnD,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;AACnD,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;AACvE,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;AAC3E,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;AACvE,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;AACvD,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;AACvE;AACA;AACA,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;AAC3E,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;AAC3E,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;AAC3E;AACA;AACA,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;AAC3E,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;AAC3E,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;AAC3E,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;AAC3E,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;AAC3E;AACA;AACA,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;AAC3E,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;AAC3E;AACA,IAAI,OAAO,OAAO,CAAC;AACnB,GAAG;AACH;AACA,EAAE,OAAO,eAAe,CAAC,SAAS,EAAE,aAAa,CAAC,IAAI,EAAE,eAAe,CAAC,IAAI,CAAC;AAC7E,IAAI,IAAI,MAAM,GAAG,IAAI,SAAS,CAAC;AAC/B,MAAM,MAAM,SAAS,GAAG,yBAAyB,CAAC,sBAAsB,EAAE,CAAC;AAC3E,MAAM,GAAG,CAAC,SAAS,GAAG,SAAS,CAAC;AAChC,MAAM,GAAG,CAAC,cAAc,GAAG,SAAS,CAAC;AACrC,MAAM,GAAG,CAAC,YAAY,GAAG,SAAS,CAAC;AACnC,MAAM,GAAG,CAAC,WAAW,GAAG,SAAS,CAAC;AAClC,MAAM,GAAG,CAAC,aAAa,GAAG,aAAa,CAAC;AACxC,MAAM,GAAG,CAAC,eAAe,GAAG,eAAe,CAAC;AAC5C,KAAK;AACL,GAAG;AACH;AACA,EAAE,OAAO,SAAS,CAAC,SAAS,EAAE,SAAS,EAAE,WAAW,EAAE,aAAa,CAAC,IAAI,EAAE,eAAe,CAAC,IAAI,CAAC;AAC/F,IAAI,IAAI,MAAM,GAAG,IAAI,SAAS,CAAC;AAC/B,MAAM,GAAG,CAAC,SAAS,GAAG,SAAS,CAAC;AAChC,MAAM,GAAG,CAAC,cAAc,GAAG,SAAS,CAAC;AACrC,MAAM,GAAG,CAAC,YAAY,GAAG,SAAS,CAAC;AACnC,MAAM,GAAG,CAAC,WAAW,GAAG,WAAW,CAAC;AACpC,MAAM,GAAG,CAAC,aAAa,GAAG,aAAa,CAAC;AACxC,MAAM,GAAG,CAAC,eAAe,GAAG,eAAe,CAAC;AAC5C,KAAK;AACL,GAAG;AACH;AACA,EAAE,OAAO,iCAAiC,CAAC,CAAC,EAAE,CAAC,EAAE,YAAY,EAAE;AAC/D,IAAI,IAAI,MAAM,GAAG,IAAI,KAAK,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC;AACvD;AACA;AACA,IAAI,KAAK,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,MAAM,CAAC,MAAM,EAAE,GAAG,EAAE,EAAE;AAClD,MAAM,MAAM,CAAC,GAAG,CAAC,GAAG,IAAI,KAAK,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC;AAC1D,KAAK;AACL;AACA,IAAI,MAAM,CAAC,CAAC,CAAC,GAAG,kBAAkB,CAAC,0BAA0B,CAAC,CAAC,EAAE,CAAC,EAAE,YAAY,CAAC,CAAC;AAClF;AACA,IAAI,CAAC,IAAI,YAAY,CAAC;AACtB,IAAI,MAAM,CAAC,CAAC,CAAC,GAAG,kBAAkB,CAAC,0BAA0B,CAAC,CAAC,EAAE,CAAC,EAAE,YAAY,CAAC,CAAC;AAClF;AACA,IAAI,CAAC,IAAI,YAAY,CAAC;AACtB,IAAI,MAAM,CAAC,CAAC,CAAC,GAAG,kBAAkB,CAAC,0BAA0B,CAAC,CAAC,EAAE,CAAC,EAAE,YAAY,CAAC,CAAC;AAClF;AACA,IAAI,CAAC,IAAI,YAAY,CAAC;AACtB,IAAI,MAAM,CAAC,CAAC,CAAC,GAAG,kBAAkB,CAAC,6BAA6B,CAAC,CAAC,EAAE,CAAC,EAAE,YAAY,CAAC,CAAC;AACrF;AACA,IAAI,OAAO,MAAM,CAAC;AAClB,GAAG;AACH;AACA,EAAE,OAAO,0BAA0B,CAAC,CAAC,EAAE,CAAC,EAAE,YAAY,EAAE;AACxD,IAAI,IAAI,MAAM,GAAG,IAAI,KAAK,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC;AACvD,IAAI,IAAI,GAAG,GAAG,CAAC,CAAC;AAChB,IAAI,MAAM,CAAC,GAAG,EAAE,CAAC,GAAG,IAAI,CAAC,gCAAgC,CAAC,CAAC,EAAE,CAAC,EAAE,YAAY,EAAE,WAAW,CAAC,WAAW,CAAC,CAAC;AACvG;AACA,IAAI,CAAC,IAAI,YAAY,CAAC;AACtB,IAAI,MAAM,CAAC,GAAG,EAAE,CAAC,GAAG,IAAI,CAAC,gCAAgC,CAAC,CAAC,EAAE,CAAC,EAAE,YAAY,EAAE,WAAW,CAAC,UAAU,CAAC,CAAC;AACtG;AACA,IAAI,CAAC,IAAI,YAAY,CAAC;AACtB,IAAI,MAAM,CAAC,GAAG,EAAE,CAAC,GAAG,IAAI,CAAC,eAAe,CAAC,CAAC,EAAE,CAAC,EAAE,YAAY,EAAE,WAAW,CAAC,OAAO,CAAC,CAAC;AAClF;AACA,IAAI,CAAC,IAAI,YAAY,CAAC;AACtB,IAAI,MAAM,CAAC,GAAG,EAAE,CAAC,GAAG,IAAI,CAAC,eAAe,CAAC,CAAC,EAAE,CAAC,EAAE,YAAY,EAAE,WAAW,CAAC,QAAQ,CAAC,CAAC;AACnF;AACA,IAAI,CAAC,IAAI,YAAY,CAAC;AACtB,IAAI,MAAM,CAAC,GAAG,EAAE,CAAC,GAAG,IAAI,CAAC,gCAAgC,CAAC,CAAC,EAAE,CAAC,EAAE,YAAY,EAAE,WAAW,CAAC,WAAW,CAAC,CAAC;AACvG;AACA,IAAI,CAAC,IAAI,YAAY,CAAC;AACtB,IAAI,MAAM,CAAC,GAAG,EAAE,CAAC,GAAG,IAAI,CAAC,gCAAgC,CAAC,CAAC,EAAE,CAAC,EAAE,YAAY,EAAE,WAAW,CAAC,UAAU,CAAC,CAAC;AACtG;AACA,IAAI,OAAO,MAAM,CAAC;AAClB,GAAG;AACH;AACA,EAAE,OAAO,0BAA0B,CAAC,CAAC,EAAE,CAAC,EAAE,YAAY,EAAE;AACxD,IAAI,IAAI,IAAI,GAAG,IAAI,KAAK,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC;AACrD,IAAI,IAAI,GAAG,GAAG,CAAC,CAAC;AAChB,IAAI,IAAI,CAAC,GAAG,EAAE,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,EAAE,YAAY,EAAE,WAAW,CAAC,QAAQ,EAAE,WAAW,CAAC,UAAU,CAAC,CAAC;AACpG;AACA,IAAI,CAAC,IAAI,YAAY,CAAC;AACtB,IAAI,IAAI,CAAC,GAAG,EAAE,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,EAAE,YAAY,EAAE,WAAW,CAAC,OAAO,EAAE,WAAW,CAAC,WAAW,CAAC,CAAC;AACpG;AACA,IAAI,CAAC,IAAI,YAAY,CAAC;AACtB,IAAI,IAAI,CAAC,GAAG,EAAE,CAAC,GAAG,IAAI,CAAC,gCAAgC,CAAC,CAAC,EAAE,CAAC,EAAE,YAAY,EAAE,WAAW,CAAC,UAAU,CAAC,CAAC;AACpG;AACA,IAAI,CAAC,IAAI,YAAY,CAAC;AACtB,IAAI,IAAI,CAAC,GAAG,EAAE,CAAC,GAAG,IAAI,CAAC,gCAAgC,CAAC,CAAC,EAAE,CAAC,EAAE,YAAY,EAAE,WAAW,CAAC,WAAW,CAAC,CAAC;AACrG;AACA,IAAI,CAAC,IAAI,YAAY,CAAC;AACtB,IAAI,IAAI,CAAC,GAAG,EAAE,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,EAAE,YAAY,EAAE,WAAW,CAAC,QAAQ,EAAE,WAAW,CAAC,UAAU,CAAC,CAAC;AACpG;AACA,IAAI,CAAC,IAAI,YAAY,CAAC;AACtB,IAAI,IAAI,CAAC,GAAG,EAAE,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,EAAE,YAAY,EAAE,WAAW,CAAC,OAAO,EAAE,WAAW,CAAC,WAAW,CAAC,CAAC;AACpG;AACA,IAAI,OAAO,IAAI,CAAC;AAChB,GAAG;AACH;AACA,EAAE,OAAO,0BAA0B,CAAC,CAAC,EAAE,CAAC,EAAE,YAAY,EAAE;AACxD,IAAI,IAAI,IAAI,GAAG,IAAI,KAAK,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC;AACrD,IAAI,KAAK,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,EAAE;AAChD,MAAM,IAAI,MAAM,GAAG,WAAW,CAAC,OAAO,CAAC;AACvC,MAAM,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC,EAAE;AACxB,QAAQ,MAAM,GAAG,WAAW,CAAC,QAAQ,CAAC;AACtC,OAAO;AACP,MAAM,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,EAAE,YAAY,EAAE,MAAM,CAAC,CAAC;AAC9D,MAAM,CAAC,IAAI,YAAY,CAAC;AACxB,KAAK;AACL,IAAI,OAAO,IAAI,CAAC;AAChB,GAAG;AACH;AACA,EAAE,OAAO,6BAA6B,CAAC,CAAC,EAAE,CAAC,EAAE,YAAY,EAAE;AAC3D,IAAI,IAAI,MAAM,GAAG,IAAI,KAAK,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC;AACvD,IAAI,KAAK,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,MAAM,CAAC,MAAM,EAAE,GAAG,EAAE,EAAE;AAClD,MAAM,IAAI,MAAM,GAAG,WAAW,CAAC,QAAQ,CAAC;AACxC,MAAM,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC,EAAE;AACxB,QAAQ,MAAM,GAAG,WAAW,CAAC,OAAO,CAAC;AACrC,OAAO;AACP,MAAM,MAAM,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,6BAA6B,CAAC,CAAC,EAAE,CAAC,EAAE,YAAY,EAAE,MAAM,CAAC,CAAC;AACnF,MAAM,CAAC,IAAI,YAAY,CAAC;AACxB,KAAK;AACL,IAAI,OAAO,MAAM,CAAC;AAClB,GAAG;AACH;AACA,EAAE,OAAO,iBAAiB,CAAC,GAAG,EAAE,GAAG,EAAE,MAAM,CAAC;AAC5C,IAAI,OAAO,CAAC,GAAG,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,MAAM,IAAI,CAAC;AAC/C,WAAW,GAAG,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,MAAM,IAAI,CAAC,CAAC;AAC/C,WAAW,GAAG,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,MAAM,IAAI,CAAC,CAAC;AAC/C,WAAW,GAAG,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,MAAM,IAAI,CAAC,CAAC,CAAC;AAChD,GAAG;AACH,CAAC;AACD;AACY,MAAC,WAAW,GAAG;AAC3B,EAAE,OAAO,EAAE,SAAS;AACpB,EAAE,QAAQ,EAAE,UAAU;AACtB,EAAE,UAAU,EAAE,YAAY;AAC1B,EAAE,WAAW,EAAE,aAAa;AAC5B,EAAE;AACF;AACO,MAAM,IAAI,CAAC;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,WAAW,CAAC,SAAS,EAAE,SAAS,EAAE;AACpC,IAAI,IAAI,CAAC,IAAI,GAAG,SAAS,CAAC;AAC1B,IAAI,IAAI,CAAC,IAAI,GAAG,SAAS,CAAC;AAC1B,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,EAAE,IAAI,CAAC,GAAG;AACV,IAAI,OAAO,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;AACvB,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,EAAE,IAAI,CAAC,GAAG;AACV,IAAI,OAAO,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;AACvB,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,EAAE,IAAI,IAAI,GAAG;AACb,IAAI,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;AAC1B,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,SAAS,CAAC,SAAS,EAAE,WAAW,CAAC;AACnC,IAAI,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;AACjC;AACA,IAAI,GAAG,WAAW,CAAC;AACnB,MAAM,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;AACvC,KAAK,KAAI;AACT,MAAM,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;AACrC,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,YAAY,CAAC,SAAS,CAAC;AACzB,IAAI,IAAI,CAAC,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;AACpC,IAAI,IAAI,CAAC,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;AACpC,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,cAAc,CAAC,WAAW,CAAC;AAC7B,IAAI,IAAI,CAAC,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;AACxC,IAAI,IAAI,CAAC,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;AACxC,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,aAAa,CAAC,SAAS,CAAC;AAC1B,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,GAAG,SAAS,CAAC;AAClC,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,GAAG,SAAS,CAAC;AAClC,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,IAAI,CAAC,GAAG,EAAE;AACZ,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;AAC3B,MAAM,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAC1B,KAAK;AACL;AACA,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;AAC3B,MAAM,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAC1B,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,OAAO,eAAe,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,cAAc,CAAC,WAAW,CAAC,OAAO,EAAE;AACzE,IAAI,IAAI,IAAI,GAAG,IAAI,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,cAAc,CAAC,CAAC;AACxD,IAAI,IAAI,IAAI,GAAG,IAAI,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,QAAQ,CAAC,oBAAoB,CAAC,cAAc,CAAC,CAAC,CAAC;AACvF,IAAI,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;AACzB,IAAI,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;AACzB,IAAI,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;AAChC,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,OAAO,6BAA6B,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,cAAc,EAAE;AACnE,IAAI,IAAI,IAAI,GAAG,IAAI,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,cAAc,CAAC,CAAC;AACxD,IAAI,IAAI,IAAI,GAAG,IAAI,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,QAAQ,CAAC,oBAAoB,CAAC,cAAc,CAAC,CAAC,CAAC;AACvF,IAAI,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;AACzB,IAAI,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;AAChC,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,OAAO,gCAAgC,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,cAAc,EAAE;AACtE,IAAI,IAAI,IAAI,GAAG,IAAI,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,QAAQ,CAAC,oBAAoB,CAAC,cAAc,CAAC,CAAC,CAAC;AACvF,IAAI,IAAI,IAAI,GAAG,IAAI,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,cAAc,CAAC,CAAC;AACxD,IAAI,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;AACzB,IAAI,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;AAChC,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,OAAO,UAAU,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,YAAY,EAAE,YAAY,EAAE;AAC5D,IAAI,IAAI,IAAI,GAAG,IAAI,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,YAAY,CAAC,CAAC;AACtD;AACA,IAAI,IAAI,CAAC,YAAY,EAAE;AACvB,MAAM,YAAY,GAAG,QAAQ,CAAC,oBAAoB,CAAC,YAAY,CAAC,CAAC;AACjE,KAAK;AACL,IAAI,IAAI,IAAI,GAAG,IAAI,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,YAAY,CAAC,CAAC;AACtD,IAAI,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;AAChC,GAAG;AACH,CAAC;AACD;AACO,MAAM,QAAQ,CAAC;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,WAAW,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,SAAS,GAAG,OAAO;AACxD,IAAI,WAAW,GAAG,OAAO,EAAE,YAAY,GAAG,CAAC,EAAE,OAAO,GAAG,IAAI,EAAE;AAC7D,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;AACf,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;AACf,IAAI,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;AACrB,IAAI,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;AAC/B,IAAI,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;AACnB;AACA,IAAI,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;AACnC,IAAI,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;AAC/B,IAAI,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;AACrC,IAAI,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;AAC3B;AACA,IAAI,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;AAC9B,IAAI,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;AAChC;AACA,IAAI,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC;AACjC,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,SAAS,CAAC,SAAS,EAAE,WAAW,CAAC;AACnC,IAAI,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;AAC/B;AACA,IAAI,GAAG,WAAW,CAAC;AACnB,MAAM,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;AACrC,KAAK,KAAI;AACT,MAAM,IAAI,CAAC,WAAW,GAAG,SAAS,CAAC;AACnC,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,IAAI,CAAC,GAAG,EAAE;AACZ,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,OAAO;AAC9B;AACA,IAAI,GAAG,CAAC,IAAI,EAAE,CAAC;AACf;AACA,IAAI,IAAI,IAAI,CAAC,aAAa,EAAE;AAC5B,MAAM,GAAG,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;AACrC,KAAK,MAAM;AACX,MAAM,GAAG,CAAC,SAAS,GAAG,kBAAkB,CAAC;AACzC,KAAK;AACL;AACA,IAAI,IAAI,IAAI,CAAC,eAAe,EAAE;AAC9B,MAAM,GAAG,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;AACzC,MAAM,GAAG,CAAC,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC;AACxC,KAAK,MAAM;AACX,MAAM,GAAG,CAAC,WAAW,GAAG,kBAAkB,CAAC;AAC3C,KAAK;AACL;AACA,IAAI,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;AAClC,IAAI,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,EAAE,GAAG,GAAG,CAAC,CAAC;AAC3C;AACA,IAAI,GAAG,CAAC,SAAS,EAAE,CAAC;AACpB,IAAI,QAAQ,IAAI,CAAC,SAAS;AAC1B,MAAM,KAAK,WAAW,CAAC,UAAU;AACjC,QAAQ,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AACzB,QAAQ,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;AACjC,QAAQ,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;AACzC,QAAQ,MAAM;AACd,MAAM,KAAK,WAAW,CAAC,WAAW;AAClC,QAAQ,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;AACjC,QAAQ,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;AACzC,QAAQ,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;AACjC,QAAQ,MAAM;AACd,MAAM,KAAK,WAAW,CAAC,QAAQ;AAC/B,QAAQ,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AACzB,QAAQ,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;AACjC,QAAQ,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;AACzC,QAAQ,MAAM;AACd,MAAM,KAAK,WAAW,CAAC,OAAO,CAAC;AAC/B,MAAM;AACN,QAAQ,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;AACjC,QAAQ,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AACzB,QAAQ,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;AACjC,QAAQ,MAAM;AACd,KAAK;AACL,IAAI,GAAG,CAAC,SAAS,EAAE,CAAC;AACpB;AACA,IAAI,IAAI,IAAI,CAAC,aAAa,EAAE;AAC5B,MAAM,GAAG,CAAC,IAAI,EAAE,CAAC;AACjB,KAAK;AACL,IAAI,IAAI,IAAI,CAAC,eAAe,EAAE;AAC9B,MAAM,GAAG,CAAC,MAAM,EAAE,CAAC;AACnB,KAAK;AACL;AACA;AACA,IAAI,IAAI,IAAI,CAAC,eAAe,EAAE;AAC9B,MAAM,GAAG,CAAC,WAAW,GAAG,0BAA0B,CAAC;AACnD,MAAM,GAAG,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;AACjD,KAAK;AACL;AACA,IAAI,GAAG,CAAC,OAAO,EAAE,CAAC;AAClB,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,OAAO,oBAAoB,CAAC,WAAW,EAAE;AAC3C,IAAI,QAAQ,WAAW;AACvB,MAAM,KAAK,WAAW,CAAC,UAAU;AACjC,QAAQ,OAAO,WAAW,CAAC,QAAQ,CAAC;AACpC,MAAM,KAAK,WAAW,CAAC,WAAW;AAClC,QAAQ,OAAO,WAAW,CAAC,OAAO,CAAC;AACnC,MAAM,KAAK,WAAW,CAAC,QAAQ;AAC/B,QAAQ,OAAO,WAAW,CAAC,UAAU,CAAC;AACtC,MAAM,KAAK,WAAW,CAAC,OAAO,CAAC;AAC/B,MAAM;AACN,QAAQ,OAAO,WAAW,CAAC,WAAW,CAAC;AACvC,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,OAAO,cAAc,CAAC,GAAG,CAAC;AAC5B,IAAI,OAAO,IAAI,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,IAAI,EAAE,GAAG,CAAC,SAAS;AAC7D,MAAM,GAAG,CAAC,SAAS,EAAE,GAAG,CAAC,WAAW,EAAE,GAAG,CAAC,YAAY,EAAE,GAAG,CAAC,OAAO,CAAC,CAAC;AACrE,GAAG;AACH,CAAC;AACD;AACO,MAAM,IAAI;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,WAAW,CAAC,SAAS,EAAE,UAAU,EAAE,YAAY,EAAE,WAAW,GAAG,0BAA0B,EAAE,SAAS,GAAG,IAAI,CAAC;AAC9G,IAAI,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,SAAS,EAAE,UAAU,EAAE,YAAY,EAAE,WAAW,EAAE,SAAS,CAAC,CAAC;AAClG,IAAI,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;AACxB,IAAI,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;AACjC,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,IAAI,CAAC,GAAG,CAAC;AACX,IAAI,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,OAAO,EAAE;AAChC;AACA,IAAI,IAAI,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,GAAG,EAAE,CAAC;AACxD,MAAM,IAAI,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,GAAG,EAAE,CAAC;AAC/D,QAAQ,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAC3C,OAAO;AACP,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,cAAc,CAAC,WAAW,CAAC;AAC7B,IAAI,IAAI,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,GAAG,EAAE,CAAC;AACxD,MAAM,IAAI,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,GAAG,EAAE,CAAC;AAC/D,QAAQ,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;AAChE,QAAQ,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;AAChE,OAAO;AACP,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,YAAY,CAAC,SAAS,CAAC;AACzB,IAAI,IAAI,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,GAAG,EAAE,CAAC;AACxD,MAAM,IAAI,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,GAAG,EAAE,CAAC;AAC/D,QAAQ,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;AAC5D,QAAQ,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;AAC5D,OAAO;AACP,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,OAAO,UAAU,CAAC,SAAS,EAAE,UAAU,EAAE,YAAY,EAAE,WAAW,EAAE,SAAS,CAAC;AAChF;AACA,IAAI,MAAM,cAAc,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,GAAG,YAAY,CAAC,CAAC;AAChE,IAAI,MAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,GAAG,YAAY,CAAC,CAAC;AAC9D;AACA,IAAI,IAAI,IAAI,GAAG,IAAI,KAAK,CAAC,WAAW,CAAC,CAAC;AACtC;AACA,IAAI,IAAI,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,CAAC;AAC9C,MAAM,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,KAAK,CAAC,cAAc,CAAC,CAAC;AAC5C,MAAM,IAAI,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,GAAG,EAAE,CAAC;AACrD,QAAQ,IAAI,MAAM,GAAG,WAAW,CAAC,OAAO,CAAC;AACzC,QAAQ,GAAG,CAAC,GAAG,GAAG,CAAC,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC,MAAM,GAAG,GAAG,CAAC,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;AAC5E,UAAU,MAAM,GAAG,WAAW,CAAC,QAAQ,CAAC;AACxC,SAAS;AACT,QAAQ,IAAI,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,GAAG,YAAY,EAAE,GAAG,GAAG,YAAY,EAAE,YAAY,EAAE,MAAM,CAAC,CAAC;AACjG;AACA,QAAQ,IAAI,CAAC,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;AAC5C,QAAQ,IAAI,CAAC,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;AAC5C;AACA,QAAQ,GAAG,SAAS,CAAC;AACrB,UAAU,IAAI,CAAC,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;AAC1C,UAAU,IAAI,CAAC,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;AAC1C,SAAS;AACT;AACA,QAAQ,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC;AAC9B,OAAO;AACP,KAAK;AACL,IAAI,OAAO,IAAI,CAAC;AAChB,GAAG;AACH,CAAC;AACD;AACY,MAAC,uBAAuB,GAAG;AACvC,EAAE,IAAI,EAAE,oBAAoB;AAC5B,EAAE,QAAQ,EAAE,oBAAoB;AAChC,EAAE,MAAM,EAAE,oBAAoB;AAC9B,EAAE,KAAK,EAAE,oBAAoB;AAC7B,EAAE,MAAM,EAAE,oBAAoB;AAC9B,EAAE,SAAS,EAAE,oBAAoB;AACjC,EAAE,IAAI,EAAE,oBAAoB;AAC5B,EAAE,WAAW,EAAE,oBAAoB;AACnC,EAAE,UAAU,EAAE,oBAAoB;AAClC,EAAE,SAAS,EAAE,oBAAoB;AACjC,EAAE;AACF;AACY,MAAC,oBAAoB,GAAG;AACpC,EAAE,uBAAuB,CAAC,IAAI;AAC9B,EAAE,uBAAuB,CAAC,QAAQ;AAClC,EAAE,uBAAuB,CAAC,WAAW;AACrC,EAAE,uBAAuB,CAAC,MAAM;AAChC,EAAE,uBAAuB,CAAC,KAAK;AAC/B,EAAE,uBAAuB,CAAC,MAAM;AAChC,EAAE,uBAAuB,CAAC,WAAW;AACrC,EAAE,uBAAuB,CAAC,UAAU;AACpC,EAAE,uBAAuB,CAAC,MAAM;AAChC,EAAE,uBAAuB,CAAC,SAAS;AACnC,EAAE,uBAAuB,CAAC,SAAS;AACnC,EAAE,uBAAuB,CAAC,IAAI;AAC9B,EAAE;AACF;AACA;AACA;AACA;AACA;AACO,MAAM,yBAAyB,CAAC;AACvC;AACA;AACA;AACA;AACA;AACA,EAAE,OAAO,sBAAsB,EAAE;AACjC,IAAI,OAAO,yBAAyB,CAAC,yBAAyB,CAAC,uBAAuB,CAAC,CAAC;AACxF,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,OAAO,yBAAyB,CAAC,OAAO,CAAC;AAC3C,IAAI,GAAG,CAAC,OAAO,CAAC;AAChB,MAAM,OAAO,GAAG,uBAAuB,CAAC;AACxC,KAAK;AACL;AACA,IAAI,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;AACtC,IAAI,MAAM,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;AAClE,IAAI,OAAO,OAAO,CAAC,OAAO,CAAC,CAAC;AAC5B,GAAG;AACH;;;;"}